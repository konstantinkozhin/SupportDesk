from __future__ import annotations

import asyncio
import logging
import os
import threading
from collections import defaultdict

import vk_api
from vk_api.longpoll import VkLongPoll, VkEventType
from vk_api.bot_longpoll import VkBotLongPoll, VkBotEventType
import vk_api.exceptions
import requests
import json
from sqlalchemy.ext.asyncio import AsyncSession, async_sessionmaker

from app.db import tickets_crud as crud, models
from app.config import load_vk_responses
from app.rag import RAGResult, RAGService
from app.services import ConnectionManager
from app.db import TicketRead, MessageRead

logger = logging.getLogger(__name__)

# Module-level VK API client (set when create_vk_bot initializes)
VK_API: any = None

# Module-level VK responses configuration
vk_responses: dict = {}

# transient per-user pending options when keyboard isn't supported by client
pending_options: dict[int, list[str]] = {}

USER_SENDER = "user"
BOT_SENDER = "bot"
OPERATOR_REQUEST_CALLBACK = "request_operator"

# –°–ª–æ–≤–∞—Ä—å –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ —Å–ø–∞–º–∞)
user_locks: dict[int, asyncio.Lock] = defaultdict(asyncio.Lock)


def _extract_title_vk(user_id: int, vk_session) -> str:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ VK"""
    try:
        user_info = vk_session.method(
            "users.get", {"user_ids": user_id, "fields": "first_name,last_name"}
        )[0]
        first_name = user_info.get("first_name", "")
        last_name = user_info.get("last_name", "")
        if first_name or last_name:
            return f"{first_name} {last_name}".strip()
        return f"VK User {user_id}"
    except Exception as e:
        logger.warning(f"Failed to get user info for {user_id}: {e}")
        return f"VK User {user_id}"


def create_vk_bot(
    session_maker: async_sessionmaker[AsyncSession],
    connection_manager: ConnectionManager,
    rag_service: RAGService,
    vk_token: str,
):
    logger.info("VK: Starting VK bot creation...")
    logger.info(f"VK: Token provided: {'YES' if vk_token else 'NO'}")

    vk_session = vk_api.VkApi(token=vk_token)
    vk = vk_session.get_api()
    # expose module-level client for other modules to use when needed
    global VK_API, vk_responses
    VK_API = vk
    vk_responses = load_vk_responses()

    # –§–ª–∞–≥ —Ç–∏–ø–∞ longpoll
    is_bot_longpoll = False  # –ù–∞—á–∏–Ω–∞–µ–º —Å –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π

    longpoll = None

    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º VkLongPoll –¥–ª—è –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—ã–π)
    try:
        logger.info("VK: Attempting VkLongPoll for personal messages...")
        longpoll = VkLongPoll(vk_session)
        logger.info("VK: VkLongPoll initialized successfully for personal messages")
    except Exception as e:
        logger.warning(
            f"VK: VkLongPoll failed: {e}, trying VkBotLongPoll for groups..."
        )
        try:
            # Fallback: –ø—Ä–æ–±—É–µ–º VkBotLongPoll –¥–ª—è —Å–æ–æ–±—â–µ—Å—Ç–≤
            logger.info("VK: Attempting to get group info...")
            group_info = vk.groups.getById()
            group_id = group_info[0]["id"]
            logger.info(f"VK: Using group ID {group_id}")
            longpoll = VkBotLongPoll(vk_session, group_id=group_id)
            is_bot_longpoll = True
            logger.info("VK: VkBotLongPoll initialized successfully")
        except vk_api.exceptions.ApiError as e:
            logger.error(f"VK: ApiError during group access: {e}")
            if "longpoll for this group is not enabled" in str(e):
                logger.warning(
                    "VK: LongPoll –Ω–µ –≤–∫–ª—é—á–µ–Ω –¥–ª—è —Å–æ–æ–±—â–µ—Å—Ç–≤–∞, trying polling mode..."
                )
                try:
                    # –í—Ç–æ—Ä–æ–π fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º polling —á–µ—Ä–µ–∑ messages.getConversations
                    logger.info("VK: Using polling mode for VK messages")
                    is_bot_longpoll = False
                    longpoll = None  # –ë—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å polling
                except Exception as poll_e:
                    logger.error(f"VK: Polling setup also failed: {poll_e}")
                    logger.error("VK: VK bot disabled - all methods failed")
                    return None
            else:
                logger.error(f"VK: Failed to initialize VkBotLongPoll: {e}")
                raise
        except Exception as e:
            logger.error(f"VK: Failed to initialize VkBotLongPoll: {e}")
            raise

    # ... –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ ...

    async def _serialize_tickets(session: AsyncSession) -> list[dict]:
        tickets = await crud.list_tickets(session, archived=False)
        result = []
        for ticket in tickets:
            ticket_data = TicketRead.from_orm(ticket).model_dump(mode="json")
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç user –∏ bot
            unread_count = sum(
                1
                for msg in ticket.messages
                if msg.sender in ["user", "bot"] and not msg.is_read
            )
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 99
            ticket_data["unread_count"] = min(unread_count, 99)
            result.append(ticket_data)
        return result

    async def _broadcast_tickets() -> None:
        async with session_maker() as session:
            tickets_payload = await _serialize_tickets(session)
        await connection_manager.broadcast_conversations(tickets_payload)

    async def _broadcast_message(
        conversation_id: int, message_schema: MessageRead
    ) -> None:
        await connection_manager.broadcast_message(
            conversation_id, message_schema.model_dump(mode="json")
        )

    async def _persist_message_vk(
        user_id: int, text: str, sender: str = USER_SENDER, message_id: int = None
    ) -> tuple[int | None, bool]:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞—è–≤–∫—É (–µ—Å–ª–∏ –µ—Å—Ç—å)"""
        chat_id = f"vk_{user_id}"  # –ü—Ä–µ—Ñ–∏–∫—Å –¥–ª—è VK
        async with session_maker() as session:
            # –ò—â–µ–º –û–¢–ö–†–´–¢–£–Æ –∑–∞—è–≤–∫—É –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞
            ticket = await crud.get_open_ticket_by_chat_id(session, chat_id)
            logger.info(
                f"VK: Looking for open ticket for chat_id={chat_id}, found: {ticket.id if ticket else None}"
            )
            if ticket is None:
                # –ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç–æ–π –∑–∞—è–≤–∫–∏ - —ç—Ç–æ –æ–±—ã—á–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ —Å –±–æ—Ç–æ–º
                return None, False

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —ç—Ç–æ–º—É —á–∞—Ç—É
            should_mark_as_read = connection_manager.has_active_chat_connections(
                ticket.id
            )
            logger.info(
                f"üì® VK Message from {sender} to ticket #{ticket.id}: has_active={should_mark_as_read}"
            )

            # –ï—Å—Ç—å –æ—Ç–∫—Ä—ã—Ç–∞—è –∑–∞—è–≤–∫–∞ - –¥–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            db_message = await crud.add_message(
                session,
                ticket_id=ticket.id,
                sender=sender,
                text=text,
                vk_message_id=message_id if sender == USER_SENDER else None,
                is_read=should_mark_as_read,  # –°—Ä–∞–∑—É –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ, –µ—Å–ª–∏ —á–∞—Ç –æ—Ç–∫—Ä—ã—Ç
            )
            logger.info(
                f"‚úÖ VK Message #{db_message.id} created with is_read={db_message.is_read}"
            )

            await session.refresh(db_message)
            await session.refresh(ticket, ["messages"])

            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¢–û–õ–¨–ö–û –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
            # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –¢–û–õ–¨–ö–û —á–µ—Ä–µ–∑ MCP tool –∞–≥–µ–Ω—Ç–æ–º
            if sender == USER_SENDER:
                try:
                    from app.rag.agent_tools import auto_update_classification

                    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    user_message_count = sum(
                        1 for msg in ticket.messages if msg.sender == USER_SENDER
                    )

                    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞
                    dialogue_parts = []
                    for msg in ticket.messages:
                        role = (
                            "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
                            if msg.sender == USER_SENDER
                            else "–ë–æ—Ç" if msg.sender == BOT_SENDER else "–û–ø–µ—Ä–∞—Ç–æ—Ä"
                        )
                        dialogue_parts.append(f"{role}: {msg.text}")
                    dialogue_history = "\n".join(dialogue_parts)

                    # –í—ã–∑—ã–≤–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¢–û–õ–¨–ö–û –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
                    update_result = auto_update_classification(
                        conversation_id=ticket.id,
                        dialogue_history=dialogue_history,
                        message_count=user_message_count,
                        current_classification=ticket.classification,
                    )

                    if update_result.get("updated"):
                        logger.info(
                            f"VK: Auto-updated classification for ticket {ticket.id}: "
                            f"classification={update_result.get('classification')}"
                        )
                        # –û–±–Ω–æ–≤–ª—è–µ–º ticket –≤ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏
                        await session.refresh(ticket)

                except Exception as e:
                    logger.warning(f"VK: Failed to auto-update classification: {e}")

            tickets_payload = await _serialize_tickets(session)

        await _broadcast_message(ticket.id, MessageRead.from_orm(db_message))
        await connection_manager.broadcast_conversations(tickets_payload)
        return ticket.id, True

    async def _create_ticket_and_add_message_vk(
        user_id: int, text: str, message_id: int
    ) -> int:
        """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        chat_id = f"vk_{user_id}"
        logger.info(
            f"VK: Creating ticket for chat_id={chat_id}, initial text={text[:80]}..."
        )
        title = _extract_title_vk(user_id, vk_session)
        async with session_maker() as session:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É
            ticket = await crud.create_ticket(session, chat_id, title)
            logger.info(
                f"VK: New ticket created with id={ticket.id} for chat_id={chat_id}"
            )

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —ç—Ç–æ–º—É —á–∞—Ç—É (–º–∞–ª–æ–≤–µ—Ä–æ—è—Ç–Ω–æ –¥–ª—è –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–∏, –Ω–æ –ø—Ä–æ–≤–µ—Ä–∏–º)
            should_mark_as_read = connection_manager.has_active_chat_connections(
                ticket.id
            )

            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏ –¥–æ–±–∞–≤–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞ –∏–∑ RAG —Å–µ—Ä–≤–∏—Å–∞
            try:
                print(
                    f"VK BOT DEBUG: Creating ticket for user {user_id}, current message: {text}"
                )

                # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞—è–≤–∫–∏ –∏–ª–∏ —Å –Ω–∞—á–∞–ª–∞
                chat_history = rag_service.get_chat_history_since_last_ticket(chat_id)
                print(
                    f"VK BOT DEBUG: Retrieved segmented chat history for user {user_id}: {len(chat_history)} messages"
                )
                logger.info(
                    f"Retrieved segmented chat history for user {user_id}: {len(chat_history)} messages"
                )

                # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                for i, msg in enumerate(chat_history):
                    sender_type = "USER" if msg.is_user else "BOT"
                    print(
                        f"VK BOT DEBUG: History message {i+1}: [{sender_type}] {msg.message[:50]}..."
                    )
                    logger.debug(
                        f"History message {i+1}: [{sender_type}] {msg.message[:50]}..."
                    )

                # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞
                for i, chat_msg in enumerate(chat_history):
                    try:
                        sender = USER_SENDER if chat_msg.is_user else BOT_SENDER
                        # –î–ª—è –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å created_at, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–æ—Å—å —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
                        await crud.add_message(
                            session,
                            ticket_id=ticket.id,
                            sender=sender,
                            text=chat_msg.message,
                            vk_message_id=None,  # –î–ª—è –∏—Å—Ç–æ—Ä–∏–∏ –Ω–µ —É–∫–∞–∑—ã–≤–∞–µ–º
                            is_system=False,
                            is_read=should_mark_as_read,
                        )
                        print(
                            f"VK BOT DEBUG: Added history message {i+1}/{len(chat_history)}: {sender} - {chat_msg.message[:30]}..."
                        )
                        logger.debug(
                            f"Added history message {i+1}/{len(chat_history)}: {sender}"
                        )
                    except Exception as e:
                        print(f"VK BOT DEBUG: Failed to add history message {i+1}: {e}")
                        logger.warning(f"Failed to add history message {i+1}: {e}")

                # –û—Ç–º–µ—á–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏
                rag_service.mark_ticket_created(chat_id)

                # –ù–ï –æ—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞ - –æ—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è –±—É–¥—É—â–∏—Ö –∑–∞—è–≤–æ–∫
                logger.info(f"Marked ticket creation for user {chat_id}")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏–∏
                last_user_messages = [
                    msg.message for msg in chat_history if msg.is_user
                ]
                if text in last_user_messages:
                    # –¢–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –µ—Å—Ç—å –≤ –∏—Å—Ç–æ—Ä–∏–∏, –Ω–µ –¥—É–±–ª–∏—Ä—É–µ–º
                    # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ db_message –¥–ª—è –æ—Ç–≤–µ—Ç–∞
                    messages = await crud.list_messages_for_ticket(session, ticket.id)
                    db_message = messages[-1] if messages else None
                    if not db_message:
                        # –ï—Å–ª–∏ –ø–æ –∫–∞–∫–æ–π-—Ç–æ –ø—Ä–∏—á–∏–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ
                        raise Exception("No messages found after adding history")
                else:
                    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏–∏
                    db_message = await crud.add_message(
                        session,
                        ticket_id=ticket.id,
                        sender=USER_SENDER,
                        text=text,
                        vk_message_id=message_id,
                        is_read=should_mark_as_read,
                    )

            except Exception as e:
                # –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ —Å –∏—Å—Ç–æ—Ä–∏–µ–π, –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                logger.warning(
                    f"Failed to process chat history for user {user_id}: {e}"
                )
                db_message = await crud.add_message(
                    session,
                    ticket_id=ticket.id,
                    sender=USER_SENDER,
                    text=text,
                    vk_message_id=message_id,
                    is_read=should_mark_as_read,
                )

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º summary —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏
            try:
                messages = await crud.list_messages_for_ticket(session, ticket.id)
                summary = await rag_service.generate_ticket_summary(
                    messages, ticket_id=ticket.id
                )
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º summary –≤ –ë–î
                await crud.update_ticket_summary(session, ticket.id, summary)
                logger.info(
                    f"Generated and saved summary for VK ticket {ticket.id}: {summary[:50]}..."
                )

                # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –ø—Ä–∏ –ø–µ—Ä–µ–¥–∞—á–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É
                try:
                    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
                    dialogue_text = ""
                    for msg in messages[-10:]:  # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π
                        sender_name = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å" if msg.sender == "user" else "–ë–æ—Ç"
                        dialogue_text += f"{sender_name}: {msg.text}\n"

                    if dialogue_text.strip():
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏–∑ agent_tools
                        from app.rag.agent_tools import _classify_request_internal

                        classification_result = _classify_request_internal(
                            dialogue_history=dialogue_text
                        )

                        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ (—Ñ–æ—Ä–º–∞—Ç: "–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –ø—Ä–æ–±–ª–µ–º—ã: –ö–∞—Ç–µ–≥–æ—Ä–∏—è1, –ö–∞—Ç–µ–≥–æ—Ä–∏—è2")
                        if "–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –ø—Ä–æ–±–ª–µ–º—ã:" in classification_result:
                            categories = classification_result.split(
                                "–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –ø—Ä–æ–±–ª–µ–º—ã:"
                            )[1].strip()
                            await crud.update_ticket_classification(
                                session, ticket.id, categories
                            )
                            logger.info(
                                f"Generated classification for VK ticket {ticket.id}: {categories}"
                            )
                except Exception as e:
                    logger.warning(
                        f"Failed to generate classification for VK ticket: {e}"
                    )
            except Exception as e:
                logger.warning(
                    f"Failed to generate summary for VK ticket {ticket.id}: {e}"
                )

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ –Ω–∞ OPEN –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if ticket.status != models.TicketStatus.OPEN:
                await crud.update_ticket_status(
                    session, ticket.id, models.TicketStatus.OPEN
                )

            tickets_payload = await _serialize_tickets(session)

        rag_service.reset_history(ticket.id)
        await _broadcast_message(ticket.id, MessageRead.from_orm(db_message))
        await connection_manager.broadcast_conversations(tickets_payload)

        notice = "‚úÖ –ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞."
        await _send_vk_message(user_id, notice)
        await _send_bot_message(ticket.id, notice, is_system=True)

        return ticket.id

    async def _send_bot_message(ticket_id: int, text: str, is_system: bool = False):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞ –≤ —Ç–∏–∫–µ—Ç"""
        async with session_maker() as session:
            db_message = await crud.add_message(
                session,
                ticket_id=ticket_id,
                sender=BOT_SENDER,
                text=text,
                is_system=is_system,
                is_read=False,
            )
            await session.refresh(db_message)
            await _broadcast_message(ticket_id, MessageRead.from_orm(db_message))
            tickets_payload = await _serialize_tickets(session)
            await connection_manager.broadcast_conversations(tickets_payload)

    async def _send_vk_message(user_id: int, text: str, keyboard: dict | None = None):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ VK"""
        try:
            logger.info(
                f"VK: Attempting to send message to user {user_id}: {text[:100]}..."
            )
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ user_id –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π (–¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
            if user_id > 0:
                logger.info(f"VK: User ID is positive: {user_id}, proceeding with send")
                # Use peer_id (works for users and chats) and a random_id generated by vk_api
                try:
                    random_id = vk_api.utils.get_random_id()
                except Exception:
                    random_id = 0
                params = {"peer_id": user_id, "message": text, "random_id": random_id}
                if keyboard:
                    try:
                        # Ensure keyboard explicitly contains inline:true
                        if isinstance(keyboard, dict) and "inline" not in keyboard:
                            keyboard["inline"] = True
                        params["keyboard"] = json.dumps(keyboard, ensure_ascii=False)
                        try:
                            # extract option labels and store in pending_options for numeric replies
                            rows = (
                                keyboard.get("buttons", [])
                                if isinstance(keyboard, dict)
                                else []
                            )
                            opts = []
                            for row in rows:
                                for btn in row:
                                    try:
                                        lbl = btn.get("action", {}).get("label")
                                    except Exception:
                                        lbl = None
                                    if lbl:
                                        opts.append(lbl)
                            if opts:
                                pending_options[user_id] = opts
                        except Exception:
                            pass
                    except Exception:
                        params["keyboard"] = json.dumps(keyboard)
                logger.debug(f"VK: Sending params: {params}")
                try:
                    result = vk.messages.send(**params)
                    logger.info(
                        f"VK: Message sent successfully to user {user_id}, result: {result}"
                    )
                except vk_api.exceptions.ApiError as api_e:
                    # Handle common VK errors (e.g., chat bot feature not enabled)
                    logger.error(
                        f"VK: ApiError while sending message to {user_id}: {api_e}"
                    )
                    # If chat bot feature not enabled (912), advise enabling or use community token
                    try:
                        if (
                            hasattr(api_e, "code")
                            and api_e.code == 912
                            or "912" in str(api_e)
                        ):
                            logger.error(
                                "VK: ApiError [912] detected - Chat bot feature may be disabled for this token. Enable Chat bot feature in group settings or use a community token."
                            )
                    except Exception:
                        pass
                    # Fallback: if keyboard was provided, send a numbered text fallback
                    if keyboard:
                        try:
                            # build numbered fallback from keyboard buttons
                            rows = (
                                keyboard.get("buttons", [])
                                if isinstance(keyboard, dict)
                                else []
                            )
                            options = []
                            idx = 1
                            for row in rows:
                                for btn in row:
                                    label = None
                                    try:
                                        label = btn.get("action", {}).get("label")
                                    except Exception:
                                        label = str(btn)
                                    if label:
                                        options.append(f"{idx}. {label}")
                                        idx += 1
                            if options:
                                fallback_text = (
                                    text
                                    + "\n\n"
                                    + "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:\n"
                                    + "\n".join(options)
                                )
                                vk.messages.send(
                                    peer_id=user_id,
                                    message=fallback_text,
                                    random_id=vk_api.utils.get_random_id(),
                                )
                                try:
                                    # store pending numeric options mapping
                                    pending_options[user_id] = [
                                        opt.split(". ", 1)[1] if ". " in opt else opt
                                        for opt in options
                                    ]
                                except Exception:
                                    pass
                        except Exception as e:
                            logger.debug(
                                f"VK: Failed to send fallback numbered message: {e}"
                            )
                    return
            else:
                logger.warning(f"VK: Invalid user_id {user_id}, cannot send message")
        except Exception as e:
            logger.error(f"VK: Failed to send VK message to {user_id}: {e}")
            logger.error(f"VK: Error details: {type(e).__name__}: {e}")
            # Try to get more details about the error
            if hasattr(e, "error_code"):
                logger.error(f"VK: Error code: {e.error_code}")
            if hasattr(e, "error_msg"):
                logger.error(f"VK: Error message: {e.error_msg}")

    async def _send_vk_typing(user_id: int):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å '–ø–µ—á–∞—Ç–∞–µ—Ç' –≤ VK"""
        try:
            logger.debug(f"VK: Sending typing status to user {user_id}")
            # VK API: setActivity –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å "–ø–µ—á–∞—Ç–∞–µ—Ç" –Ω–∞ 10 —Å–µ–∫—É–Ω–¥
            await asyncio.to_thread(
                vk.messages.setActivity, user_id=user_id, type="typing"
            )
        except Exception as e:
            logger.warning(f"VK: Failed to send typing status to {user_id}: {e}")

    def _build_vk_keyboard(buttons: list[list[str]]) -> dict | None:
        """Builds VK inline keyboard-like payload as a simple JSON keyboard.

        buttons: list of rows, each row is a list of strings (labels).
        VK doesn't support Telegram-style inline buttons for personal messages the same way,
        but we can send a JSON keyboard used by some clients or simply include numbered options.
        We'll return a minimal structure compatible with VK messages API 'keyboard' param.
        """
        try:
            # Simple VK keyboard structure with inline and payloads
            kb = {"one_time": False, "buttons": [], "inline": True}
            for row in buttons:
                kb_row = []
                for label in row:
                    # action.payload must be a JSON-encoded string
                    try:
                        payload = json.dumps({"topic": label}, ensure_ascii=False)
                    except Exception:
                        payload = json.dumps({"topic": str(label)})
                    kb_row.append(
                        {
                            "action": {
                                "type": "text",
                                "payload": payload,
                                "label": label,
                            },
                            "color": "default",
                        }
                    )
                kb["buttons"].append(kb_row)
            # register pending options for users when this keyboard will be sent
            # Note: we cannot know user_id here; caller should set pending_options[user_id] after send
            return kb
        except Exception:
            return None

    def _build_confirm_operator_keyboard() -> dict | None:
        """Build a keyboard with Confirm/Cancel for operator request."""
        try:
            kb = {"one_time": True, "buttons": [], "inline": True}
            yes_payload = json.dumps({"confirm_operator": "yes"}, ensure_ascii=False)
            no_payload = json.dumps({"confirm_operator": "no"}, ensure_ascii=False)
            kb["buttons"].append(
                [
                    {
                        "action": {
                            "type": "text",
                            "payload": yes_payload,
                            "label": "–î–∞",
                        },
                        "color": "primary",
                    },
                    {
                        "action": {
                            "type": "text",
                            "payload": no_payload,
                            "label": "–ù–µ—Ç",
                        },
                        "color": "default",
                    },
                ]
            )
            return kb
        except Exception:
            return None

    async def _send_bot_message(ticket_id: int, text: str, is_system: bool = False):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞ –≤ —Ç–∏–∫–µ—Ç"""
        async with session_maker() as session:
            db_message = await crud.add_message(
                session,
                ticket_id=ticket_id,
                sender=BOT_SENDER,
                text=text,
                is_system=is_system,
                is_read=False,
            )
            await session.refresh(db_message)
            await _broadcast_message(ticket_id, MessageRead.from_orm(db_message))
            tickets_payload = await _serialize_tickets(session)
            await connection_manager.broadcast_conversations(tickets_payload)

    async def _get_average_response_time() -> str:
        """–í—ã—á–∏—Å–ª—è–µ—Ç —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞"""
        try:
            async with session_maker() as session:
                from sqlalchemy import select, func
                from datetime import datetime, timedelta

                thirty_days_ago = datetime.utcnow() - timedelta(days=30)
                stmt = select(models.Ticket).where(
                    models.Ticket.status == models.TicketStatus.CLOSED,
                    models.Ticket.created_at >= thirty_days_ago,
                )
                result = await session.execute(stmt)
                tickets = result.scalars().all()

                if not tickets:
                    return "–æ–±—ã—á–Ω–æ –±—ã—Å—Ç—Ä–æ"

                response_times = []
                for ticket in tickets:
                    messages = await crud.list_messages_for_ticket(session, ticket.id)
                    operator_message = next(
                        (m for m in messages if m.sender == "operator"), None
                    )
                    if operator_message and ticket.created_at:
                        delta = operator_message.created_at - ticket.created_at
                        response_times.append(delta.total_seconds() / 60)

                if not response_times:
                    return "–æ–±—ã—á–Ω–æ –±—ã—Å—Ç—Ä–æ"

                avg_minutes = sum(response_times) / len(response_times)

                if avg_minutes < 1:
                    return "–º–µ–Ω–µ–µ –º–∏–Ω—É—Ç—ã"
                elif avg_minutes < 5:
                    return f"{int(avg_minutes)} –º–∏–Ω"
                elif avg_minutes < 60:
                    return f"{int(avg_minutes)} –º–∏–Ω—É—Ç"
                else:
                    hours = int(avg_minutes / 60)
                    return f"–æ–∫–æ–ª–æ {hours} —á"

        except Exception as e:
            logger.warning(f"Failed to calculate average response time: {e}")
            return "–æ–±—ã—á–Ω–æ –±—ã—Å—Ç—Ä–æ"

    async def _send_bot_message_to_ticket_vk(user_id: int, text: str) -> None:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞ –≤ —Ç–∏–∫–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è VK (–µ—Å–ª–∏ —Ç–∏–∫–µ—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)"""
        chat_id = f"vk_{user_id}"
        async with session_maker() as session:
            ticket = await crud.get_open_ticket_by_chat_id(session, chat_id)
            if ticket:
                should_mark_as_read = connection_manager.has_active_chat_connections(
                    ticket.id
                )

                db_message = await crud.add_message(
                    session,
                    ticket_id=ticket.id,
                    sender=BOT_SENDER,
                    text=text,
                    is_read=should_mark_as_read,
                )

                await _broadcast_message(ticket.id, MessageRead.from_orm(db_message))
                await _broadcast_tickets()

    async def _answer_with_rag_only_vk(user_id: int, user_text: str) -> None:
        """–û—Ç–≤–µ—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —á–µ—Ä–µ–∑ RAG –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ç–≤–µ—Ç –≤ —Ç–∏–∫–µ—Ç (–µ—Å–ª–∏ –µ—Å—Ç—å)"""
        logger.info(
            f"VK: Starting RAG processing for user {user_id}, text: {user_text[:50]}..."
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å "–ø–µ—á–∞—Ç–∞–µ—Ç"
        await _send_vk_typing(user_id)

        try:
            conversation_id = f"vk_{user_id}"
            logger.info(
                f"VK: Calling RAG generate_reply for conversation {conversation_id}"
            )
            # –ï—Å–ª–∏ —ç—Ç–æ HybridRAGService - –º–µ—Ç–æ–¥ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π, –ø—Ä–æ—Å—Ç–æ await
            # –ï—Å–ª–∏ —ç—Ç–æ RAGService - –º–µ—Ç–æ–¥ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º to_thread
            try:
                # –ü—Ä–æ–±—É–µ–º –≤—ã–∑–≤–∞—Ç—å –∫–∞–∫ async
                rag_result: RAGResult = await rag_service.generate_reply(
                    conversation_id,
                    user_text,
                )
            except TypeError:
                # –ï—Å–ª–∏ –º–µ—Ç–æ–¥ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π, –≤—ã–∑—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ to_thread
                rag_result: RAGResult = await asyncio.to_thread(
                    rag_service.generate_reply,
                    conversation_id,
                    user_text,
                )
            logger.info(
                f"VK: RAG result received: operator_requested={rag_result.operator_requested}, answer_length={len(rag_result.final_answer) if rag_result.final_answer else 0}"
            )
        except Exception as exc:
            logger.exception("VK RAG generation failed: %s", exc)
            fallback = "–ù–µ —Å–º–æ–≥–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –ø–æ–∑–æ–≤–∏—Ç–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞."
            await _send_vk_message(user_id, fallback)
            return

        if rag_result.operator_requested:
            logger.info(f"VK: RAG requested operator for user {user_id}")
            # RAG —Ä–µ—à–∏–ª, —á—Ç–æ –Ω—É–∂–µ–Ω –æ–ø–µ—Ä–∞—Ç–æ—Ä - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
            avg_response_time = await _get_average_response_time()

            combined_text = (
                f"{rag_result.final_answer}\n\n"
                "–•–æ—Ç–∏—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –∂–∏–≤—ã–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º? –ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –º—ã —Å–æ–∑–¥–∞–¥–∏–º –∑–∞—è–≤–∫—É –∏ —É–≤–µ–¥–æ–º–∏–º –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤.\n\n"
                f"‚è± –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {avg_response_time}\n\n"
                "–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø–æ–¥–∫–ª—é—á–∏—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ ‚Äî –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '–¥–∞'."
            )
            # For VK we don't send a 'No' option; instruct user to reply '–¥–∞' to call operator.
            await _send_vk_message(user_id, combined_text)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞ –≤ —Ç–∏–∫–µ—Ç
            await _send_bot_message_to_ticket_vk(user_id, combined_text)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é RAG
            rag_service.add_to_history(conversation_id, user_text, False)
            rag_service.add_to_history(conversation_id, combined_text, True)
        else:
            logger.info(f"VK: RAG provided direct answer for user {user_id}")
            response_text = f"{rag_result.final_answer}"
            logger.info(
                f"VK: Sending RAG response to user {user_id}: {response_text[:100]}..."
            )
            await _send_vk_message(user_id, response_text)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞ –≤ —Ç–∏–∫–µ—Ç
            await _send_bot_message_to_ticket_vk(user_id, response_text)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏–∏ RAG
            rag_service.add_to_history(conversation_id, user_text, False)
            rag_service.add_to_history(conversation_id, rag_result.final_answer, True)

    async def _handle_vk_voice_message(user_id: int, attachment: dict, message_id: int):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ VK"""
        try:
            logger.info(f"VK: Processing voice message from user {user_id}")

            # Normalize attachment: it may be a dict or a short string; if it's not a dict, try to fetch full message
            if not isinstance(attachment, dict):
                logger.debug(
                    "VK: attachment is not dict, attempting to fetch message by id to resolve attachments"
                )
                try:
                    msg_info = vk.messages.getById(message_ids=message_id)
                    items = msg_info.get("items", [])
                    if items:
                        msg_obj = items[0]
                        atts = msg_obj.get("attachments", [])
                        # find first audio_message attachment
                        found = None
                        for att in atts:
                            if (
                                isinstance(att, dict)
                                and att.get("type") == "audio_message"
                            ):
                                found = att
                                break
                        if found:
                            attachment = found
                        else:
                            logger.warning(
                                f"VK: No audio_message attachment found in fetched message {message_id}"
                            )
                            await _send_vk_message(
                                user_id,
                                vk_responses.get(
                                    "voice_processing_error",
                                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.",
                                ),
                            )
                            return
                    else:
                        logger.warning(
                            f"VK: getById returned no items for message {message_id}"
                        )
                        await _send_vk_message(
                            user_id,
                            vk_responses.get(
                                "voice_processing_error",
                                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.",
                            ),
                        )
                        return
                except Exception as e:
                    logger.debug(
                        f"VK: Failed to fetch message by id for attachment: {e}"
                    )
                    await _send_vk_message(
                        user_id,
                        vk_responses.get(
                            "voice_processing_error",
                            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.",
                        ),
                    )
                    return

            # –ù–ï —Å–æ—Ö—Ä–∞–Ω—è–µ–º placeholder ‚Äî –±—É–¥–µ–º —Å–æ—Ö—Ä–∞–Ω—è—Ç—å —Ç–æ–ª—å–∫–æ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫—É.
            # –≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤ UI –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –ø–æ–Ω—è—Ç–Ω—É—é —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫—É, –∞ –Ω–µ '[–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ]'.
            ticket_id_tmp = None
            was_ticket = False

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å "–ø–µ—á–∞—Ç–∞–µ—Ç"
            await _send_vk_typing(user_id)

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            processing_msg = vk_responses.get(
                "processing_message", "‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –∑–∞–ø—Ä–æ—Å..."
            )
            await _send_vk_message(user_id, processing_msg)

            # –ü–æ–ª—É—á–∞–µ–º URL –∞—É–¥–∏–æ —Ñ–∞–π–ª (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–ª–µ–π)
            audio_message = {}
            if isinstance(attachment, dict):
                audio_message = (
                    attachment.get("audio_message") or attachment.get("audio") or {}
                )
            # try multiple keys commonly used
            audio_url = None
            if isinstance(audio_message, dict):
                audio_url = (
                    audio_message.get("link_mp3")
                    or audio_message.get("link_ogg")
                    or audio_message.get("link")
                    or audio_message.get("url")
                )

            if not audio_url:
                # –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —á–µ—Ä–µ–∑ messages.getById (–µ—â—ë –æ–¥–∏–Ω —à–∞–Ω—Å)
                try:
                    msg_info = vk.messages.getById(message_ids=message_id)
                    items = msg_info.get("items", [])
                    if items:
                        msg_obj = items[0]
                        atts = msg_obj.get("attachments", [])
                        for att in atts:
                            if (
                                isinstance(att, dict)
                                and att.get("type") == "audio_message"
                            ):
                                am = att.get("audio_message") or att.get("audio") or {}
                                audio_url = (
                                    am.get("link_mp3")
                                    or am.get("link_ogg")
                                    or am.get("link")
                                    or am.get("url")
                                )
                                if audio_url:
                                    break
                except Exception as e:
                    logger.debug(f"VK: getById extra attempt failed: {e}")

            if not audio_url:
                await _send_vk_message(
                    user_id,
                    vk_responses.get(
                        "voice_processing_error",
                        "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.",
                    ),
                )
                # Mark placeholder as system note if persisted earlier
                try:
                    if ticket_id_tmp:
                        await _send_bot_message(
                            ticket_id_tmp,
                            "[–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –∞—É–¥–∏–æ]",
                            is_system=True,
                        )
                except Exception:
                    pass
                return

            # –°–∫–∞—á–∏–≤–∞–µ–º –∞—É–¥–∏–æ —Ñ–∞–π–ª
            import requests
            import tempfile
            import os

            # –°–∫–∞—á–∏–≤–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)
            response = await asyncio.to_thread(requests.get, audio_url, timeout=20)
            if response.status_code != 200:
                await _send_vk_message(
                    user_id,
                    vk_responses.get(
                        "voice_download_error",
                        "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.",
                    ),
                )
                return

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            with tempfile.NamedTemporaryFile(suffix=".mp3", delete=False) as temp_file:
                temp_file.write(response.content)
                temp_file_path = temp_file.name

            try:
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≥–æ–ª–æ—Å –≤ —Ç–µ–∫—Å—Ç
                try:
                    transcribed_text = (
                        await rag_service.speech_to_text.transcribe_audio(
                            temp_file_path
                        )
                    )
                except Exception as e:
                    logger.exception(
                        f"VK: speech_to_text failed for user {user_id}: {e}"
                    )
                    transcribed_text = None

                if not transcribed_text:
                    # –ï—Å–ª–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, —É–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ù–ï —Å–æ–∑–¥–∞—ë–º –ø—É—Å—Ç—É—é –∑–∞–ø–∏—Å—å
                    await _send_vk_message(
                        user_id,
                        vk_responses.get(
                            "speech_recognition_error",
                            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–º.",
                        ),
                    )
                    return

                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫—É –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç
                ticket_id, has_ticket = await _persist_message_vk(
                    user_id, transcribed_text, USER_SENDER, message_id
                )

                # –ï—Å–ª–∏ –µ—Å—Ç—å –∑–∞—è–≤–∫–∞, —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç –±–æ—Ç–∞
                # –ï—Å–ª–∏ –Ω–µ—Ç –∑–∞—è–≤–∫–∏ ‚Äî –æ—Ç–≤–µ—á–∞–µ–º —á–µ—Ä–µ–∑ RAG
                if not has_ticket or not ticket_id:
                    await _answer_with_rag_only_vk(user_id, transcribed_text)

            finally:
                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                if os.path.exists(temp_file_path):
                    os.unlink(temp_file_path)

        except Exception as e:
            logger.exception(
                f"VK: Error processing voice message from user {user_id}: {e}"
            )
            await _send_vk_message(
                user_id,
                vk_responses.get(
                    "voice_general_error",
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–º.",
                ),
            )

    async def handle_vk_message(event):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ VK"""
        # Normalize different event shapes coming from VkLongPoll / VkBotLongPoll
        user_id = None
        text = ""
        message_id = 0
        attachments = []

        try:
            # Case: event.object -> VkBotLongPoll event wrapper
            if hasattr(event, "object") and isinstance(event.object, dict):
                msg = event.object.get("message") or event.object
                # payload may be present in bot events
                payload_raw = msg.get("payload") if isinstance(msg, dict) else None
                payload = None
                if payload_raw:
                    try:
                        payload = json.loads(payload_raw)
                    except Exception:
                        payload = None
                user_id = msg.get("from_id") or msg.get("peer_id") or msg.get("user_id")
                text = msg.get("text") or ""
                message_id = msg.get("id") or msg.get("message_id") or 0
                attachments = msg.get("attachments") or []
                # If payload contains a topic, override text with it for processing
                if payload and isinstance(payload, dict):
                    if payload.get("topic"):
                        text = payload.get("topic")
                    # operator confirm payload handling
                    if payload.get("confirm_operator"):
                        choice = str(payload.get("confirm_operator")).lower()
                        if choice == "yes" or choice == "y" or choice == "–¥–∞":
                            # create ticket now
                            ticket_id = await _create_ticket_and_add_message_vk(
                                user_id,
                                "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞",
                                message_id,
                            )
                            if ticket_id:
                                await _broadcast_tickets()
                            # notify user
                            await _send_vk_message(
                                user_id,
                                vk_responses.get(
                                    "operator_connected",
                                    "‚úÖ –û–ø–µ—Ä–∞—Ç–æ—Ä –±—É–¥–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.",
                                ),
                            )
                        else:
                            await _send_vk_message(
                                user_id,
                                vk_responses.get(
                                    "operator_cancelled",
                                    "–û—Ç–º–µ–Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞.",
                                ),
                            )
                        # We handled the payload action ‚Äî stop further processing
                        return
            # Case: event.message (some wrappers)
            elif hasattr(event, "message") and isinstance(event.message, dict):
                msg = event.message
                payload_raw = msg.get("payload") if isinstance(msg, dict) else None
                payload = None
                if payload_raw:
                    try:
                        payload = json.loads(payload_raw)
                    except Exception:
                        payload = None
                user_id = msg.get("from_id") or msg.get("peer_id")
                text = msg.get("text") or ""
                message_id = msg.get("id") or 0
                attachments = msg.get("attachments") or []
                if payload and isinstance(payload, dict) and payload.get("topic"):
                    text = payload.get("topic")
            # Case: simple Event with attrs user_id/text
            elif hasattr(event, "user_id"):
                user_id = getattr(event, "user_id", None)
                text = getattr(event, "text", "") or ""
                message_id = getattr(event, "message_id", getattr(event, "id", 0))
                attachments = getattr(event, "attachments", []) or []
            else:
                logger.error(f"VK: Event missing required attributes: {dir(event)}")
                return
        except Exception as e:
            logger.exception(f"VK: Failed to normalize event: {e}")
            return

        # attachments may be strings (short forms) or dicts; normalize
        def _find_audio_in_attachments(atts_list):
            if not atts_list:
                return None
            for att in atts_list:
                try:
                    if isinstance(att, dict):
                        typ = att.get("type")
                        if typ == "audio_message":
                            return att
                        # some shapes may contain audio under 'audio_message' or 'audio'
                        inner = att.get("audio_message") or att.get("audio")
                        if isinstance(inner, dict) and (
                            inner.get("link_mp3")
                            or inner.get("link_ogg")
                            or inner.get("url")
                            or inner.get("link")
                        ):
                            return {"type": "audio_message", "audio_message": inner}
                        # doc attachments may contain audio files
                        if typ == "doc":
                            doc = att.get("doc") or {}
                            if doc.get("mime_type", "").startswith("audio") or doc.get(
                                "ext"
                            ) in ["mp3", "ogg"]:
                                return {
                                    "type": "audio_message",
                                    "audio_message": {
                                        "link": doc.get("url")
                                        or doc.get("preview", {}).get("photo")
                                    },
                                }
                    elif isinstance(att, str):
                        # short form string like 'audio_message123_456' - ignore here, we'll fetch full message
                        continue
                except Exception:
                    continue
            return None

        # quick check in provided attachments
        audio_att = None
        if attachments and isinstance(attachments, list):
            audio_att = _find_audio_in_attachments(attachments)
            if audio_att:
                logger.info(
                    f"VK: Detected audio attachment in provided attachments for user {user_id}"
                )
                await _handle_vk_voice_message(user_id, audio_att, message_id)
                return

        # If there is no text and no audio found yet, try to fetch the message by id to inspect attachments
        if (not text or not text.strip()) and message_id:
            try:
                msg_info = vk.messages.getById(message_ids=message_id)
                items = msg_info.get("items", [])
                if items:
                    msg_obj = items[0]
                    atts = msg_obj.get("attachments", [])
                    audio_att = _find_audio_in_attachments(atts)
                    if audio_att:
                        logger.info(
                            f"VK: Detected audio attachment after getById for user {user_id}"
                        )
                        await _handle_vk_voice_message(user_id, audio_att, message_id)
                        return
            except Exception as e:
                logger.debug(f"VK: getById secondary check failed: {e}")

        logger.info(
            f"VK: Processing message from user {user_id}: '{text}' (id={message_id})"
        )

        # If user replied with a single number and we have pending options, map it
        if isinstance(text, str) and text.strip().isdigit():
            try:
                num = int(text.strip())
                opts = pending_options.get(user_id)
                if opts and 1 <= num <= len(opts):
                    mapped = opts[num - 1]
                    logger.info(
                        f"VK: Mapped numeric reply {num} -> '{mapped}' for user {user_id}"
                    )
                    text = mapped
                    # clear pending options after selection
                    try:
                        del pending_options[user_id]
                    except KeyError:
                        pass
            except Exception:
                pass

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
        async with user_locks[user_id]:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ—Ç–∫—Ä—ã—Ç–∞—è –∑–∞—è–≤–∫–∞
            async with session_maker() as session:
                ticket = await crud.get_open_ticket_by_chat_id(session, f"vk_{user_id}")

                if ticket is None:
                    # –ù–ï–¢ –ó–ê–Ø–í–ö–ò - —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é –ø—Ä–∏ –ø–µ—Ä–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
                    logger.info(
                        f"VK: Creating new ticket for user {user_id} on first message"
                    )
                    ticket_id = await _create_ticket_and_add_message_vk(
                        user_id, text, message_id
                    )

                    # –û—Ç–≤–µ—á–∞–µ–º —á–µ—Ä–µ–∑ RAG
                    await _answer_with_rag_only_vk(user_id, text)
                    return

                # –ï–°–¢–¨ –ó–ê–Ø–í–ö–ê - –ø—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥–∫–ª—é—á–µ–Ω –ª–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä
                if ticket.operator_requested:
                    # –û–ø–µ—Ä–∞—Ç–æ—Ä –ø–æ–¥–∫–ª—é—á–µ–Ω - —Ç–æ–ª—å–∫–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –±–æ—Ç –º–æ–ª—á–∏—Ç
                    await _persist_message_vk(user_id, text, USER_SENDER, message_id)
                    await _broadcast_tickets()
                    return
                else:
                    # –û–ø–µ—Ä–∞—Ç–æ—Ä –ù–ï –ø–æ–¥–∫–ª—é—á–µ–Ω - —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ò –æ—Ç–≤–µ—á–∞–µ–º —á–µ—Ä–µ–∑ RAG
                    await _persist_message_vk(user_id, text, USER_SENDER, message_id)
                    await _answer_with_rag_only_vk(user_id, text)
                    return

            # –ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç–æ–π –∑–∞—è–≤–∫–∏ - –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
            low = text.lower().strip()
            agree_phrases = [
                "–¥–∞",
                "yes",
                "–ø–æ–¥–∫–ª—é—á–∏—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞",
                "–¥–∞, –ø–æ–¥–∫–ª—é—á–∏—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞",
            ]
            operator_phrases = [
                "–ø–æ–∑–æ–≤–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞",
                "–ø–æ–∑–æ–≤–∏—Ç–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞",
                "–≤—ã–∑–≤–∞—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞",
                "—Ö–æ—á—É –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞",
                "–ø–æ–¥–∫–ª—é—á–∏—Ç–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞",
                "–ø–æ–∑–æ–≤–∏",
                "–ø–æ–∑–æ–≤–∏—Ç–µ",
            ]

            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–Ω–æ –æ—Ç–≤–µ—Ç–∏–ª '–¥–∞' –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–∏—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
            if low in agree_phrases:
                logger.info(f"VK: User {user_id} agreed to connect operator")
                ticket_id = await _create_ticket_and_add_message_vk(
                    user_id, text, message_id
                )
                if ticket_id:
                    await _broadcast_tickets()
                return

            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å–∏—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Ä–∞–∑–Ω—ã–º–∏ —Ñ—Ä–∞–∑–∞–º–∏ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–ª–æ–≤–æ '–æ–ø–µ—Ä–∞—Ç–æ—Ä' —Å –≥–ª–∞–≥–æ–ª–æ–º
            def requests_operator(s: str) -> bool:
                if not s:
                    return False
                for p in operator_phrases:
                    if p in s:
                        return True
                # heuristic: '–æ–ø–µ—Ä–∞—Ç–æ—Ä' + nearby verb-like words
                if "–æ–ø–µ—Ä–∞—Ç–æ—Ä" in s:
                    verbs = ["–ø–æ–∑", "–≤—ã–∑", "–ø–æ–¥–∫–ª", "—Ö–æ—á", "–Ω—É–∂–Ω"]
                    for v in verbs:
                        if v in s:
                            return True
                return False

            if requests_operator(low):
                logger.info(f"VK: User {user_id} requested operator via phrase: {text}")
                # Instead of creating ticket immediately, send instruction to reply '–¥–∞' to call operator
                avg_response_time = await _get_average_response_time()
                confirm_text = vk_responses.get(
                    "operator_request_confirmation", ""
                ).format(avg_response_time=avg_response_time)
                await _send_vk_message(user_id, confirm_text)
                # Save a system note in history that user asked to call operator (not creating ticket yet)
                try:
                    rag_service.add_to_history(f"vk_{user_id}", text, False)
                    rag_service.add_to_history(f"vk_{user_id}", confirm_text, True)
                except Exception:
                    pass
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–µ–º—É
            topic_selected = await _check_topic_selection_vk(user_id, text)
            if topic_selected:
                logger.info(f"VK: User {user_id} selected topic: {topic_selected}")
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Ç–µ–º—É –∫–∞–∫ –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
                await _answer_with_rag_only_vk(user_id, topic_selected)
                return

            # –û–±—ã—á–Ω—ã–π –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ RAG
            logger.info(f"VK: Processing —á–µ—Ä–µ–∑ RAG –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            await _answer_with_rag_only_vk(user_id, text)

    async def _check_topic_selection_vk(user_id: int, text: str) -> str | None:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –≤—ã–±—Ä–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–µ–º—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö"""
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–æ–≤–æ–π user_id –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏
            user_id_int = user_id
            chat_history = rag_service.get_chat_history(user_id_int)

            # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞ —Å —Ç–µ–º–∞–º–∏
            for msg in reversed(chat_history):
                if not msg.is_user and "–•–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ" in msg.message:
                    # –†–∞–∑–±–∏—Ä–∞–µ–º —Ç–µ–º—ã –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
                    lines = msg.message.split("\n")
                    topics = []
                    for line in lines:
                        if line.strip().startswith("‚Ä¢ "):
                            topic = line.strip()[2:]  # –£–±–∏—Ä–∞–µ–º "‚Ä¢ "
                            topics.append(topic)

                    if topics:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç –Ω–æ–º–µ—Ä–æ–º –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ–º —Ç–µ–º—ã
                        text_lower = text.lower().strip()

                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–º–µ—Ä —Ç–µ–º—ã (1, 2, 3...)
                        try:
                            topic_index = int(text) - 1  # 1-based to 0-based
                            if 0 <= topic_index < len(topics):
                                return topics[topic_index]
                        except ValueError:
                            pass

                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–µ–º—ã
                        for topic in topics:
                            if text_lower == topic.lower():
                                return topic

                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
                        for topic in topics:
                            if (
                                text_lower in topic.lower()
                                or topic.lower() in text_lower
                            ):
                                return topic

                    break  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–º–∞–º–∏

            return None
        except Exception as e:
            logger.exception(
                f"VK: Error checking topic selection for user {user_id}: {e}"
            )
            return None

    # –û—á–µ—Ä–µ–¥—å –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –ø–æ—Ç–æ–∫–∞
    message_queue = asyncio.Queue()

    # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è
    def run_vk_bot_sync():
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        logger.info(
            f"VK: Starting VK longpoll listener (bot_mode={is_bot_longpoll})..."
        )
        try:
            for event in longpoll.listen():
                logger.info(
                    f"VK: Received event type={event.type}, user_id={getattr(event, 'user_id', 'N/A')}, text={getattr(event, 'text', 'N/A')}"
                )
                if is_bot_longpoll:
                    # VkBotLongPoll
                    if event.type == VkBotEventType.MESSAGE_NEW:
                        logger.info(
                            f"VK: Processing bot message from user {event.user_id}: {event.text}"
                        )
                        # –ü–æ–º–µ—â–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ –æ—á–µ—Ä–µ–¥—å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ asyncio
                        asyncio.run_coroutine_threadsafe(message_queue.put(event), loop)
                    else:
                        logger.debug(f"VK: Ignoring bot event type={event.type}")
                else:
                    # VkLongPoll fallback
                    if event.type == VkEventType.MESSAGE_NEW and event.to_me:
                        logger.info(
                            f"VK: Processing personal message to me from user {event.user_id}: {event.text}"
                        )
                        # –ü–æ–º–µ—â–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ –æ—á–µ—Ä–µ–¥—å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ asyncio
                        asyncio.run_coroutine_threadsafe(message_queue.put(event), loop)
                    else:
                        logger.debug(
                            f"VK: Ignoring personal event type={event.type}, to_me={getattr(event, 'to_me', 'N/A')}"
                        )
        except Exception as e:
            logger.error(f"VK: LongPoll listener crashed: {e}")
            logger.error(f"VK: Error type: {type(e).__name__}")

    def run_vk_polling():
        """Polling —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π"""
        import time

        logger.info("VK: Starting VK polling listener...")
        last_message_id = 0

        while True:
            try:
                # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                response = vk.messages.getConversations(count=20, filter="unread")
                conversations = response.get("items", [])

                for conv in conversations:
                    conversation = conv.get("conversation", {})
                    last_message = conv.get("last_message", {})

                    if last_message and last_message.get("id", 0) > last_message_id:
                        user_id = last_message.get("from_id", 0)
                        text = last_message.get("text", "")
                        message_id = last_message.get("id", 0)

                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–Ω–µ –æ—Ç –Ω–∞—Å)
                        if (
                            user_id > 0 and text
                        ):  # user_id > 0 –æ–∑–Ω–∞—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –Ω–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ
                            logger.info(
                                f"VK: Polled message from user {user_id}: {text}"
                            )

                            # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Å–æ–±—ã—Ç–∏—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                            class MockEvent:
                                def __init__(self, user_id, text, message_id):
                                    self.user_id = user_id
                                    self.text = text
                                    self.message_id = message_id

                            event = MockEvent(user_id, text, message_id)
                            asyncio.run_coroutine_threadsafe(
                                message_queue.put(event), loop
                            )

                            # –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ
                            try:
                                vk.messages.markAsRead(peer_id=user_id)
                            except Exception as e:
                                logger.debug(f"VK: Failed to mark message as read: {e}")

                            last_message_id = max(last_message_id, message_id)

                time.sleep(2)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã

            except Exception as e:
                logger.error(f"VK: Polling error: {e}")
                time.sleep(5)  # –ñ–¥–µ–º 5 —Å–µ–∫—É–Ω–¥ –ø—Ä–∏ –æ—à–∏–±–∫–µ

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π event loop
    try:
        loop = asyncio.get_running_loop()
    except RuntimeError:
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)

    # –ó–∞–ø—É—Å–∫–∞–µ–º longpoll –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ –∏–ª–∏ polling
    if longpoll is not None:
        # LongPoll —Ä–µ–∂–∏–º
        thread = threading.Thread(target=run_vk_bot_sync, daemon=True)
        thread.start()
    else:
        # Polling —Ä–µ–∂–∏–º
        logger.info("VK: Starting polling mode")
        thread = threading.Thread(target=run_vk_polling, daemon=True)
        thread.start()

    async def run_vk_bot():
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        logger.info("VK: Async message processor started")
        while True:
            logger.debug("VK: Waiting for message in queue...")
            # –ñ–¥–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –æ—á–µ—Ä–µ–¥–∏
            event = await message_queue.get()
            logger.info(
                f"VK: Processing message from queue: user {event.user_id}, text: {event.text}"
            )
            await handle_vk_message(event)
            message_queue.task_done()
            logger.debug("VK: Message processed")

    return run_vk_bot


async def start_vk_bot(run_vk_bot_func):
    try:
        logger.info("VK: Starting VK bot task...")
        await run_vk_bot_func()
    except asyncio.CancelledError:
        logger.info("VK: Bot task cancelled")
        raise
    except Exception as e:
        logger.error(f"VK: Bot task failed: {e}")
        logger.exception("VK bot error details:")
        raise
