"""
–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è RAG –∞–≥–µ–Ω—Ç–∞
"""

import logging
import contextvars
from typing import List, Dict, Any, Optional
from agno.tools import tool
from collections import deque
import threading

logger = logging.getLogger(__name__)

# Context variable –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ conversation_id –≤ async –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
_conversation_id_var: contextvars.ContextVar[Optional[int]] = contextvars.ContextVar(
    "conversation_id", default=None
)

# –û—á–µ—Ä–µ–¥—å –¥–ª—è –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –∞–≥–µ–Ω—Ç–∞ –≤ Telegram
_action_queue: deque = deque()
_action_queue_lock = threading.Lock()

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å SentenceTransformer (–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –æ–¥–∏–Ω —Ä–∞–∑)
_sentence_transformer = None
_sentence_transformer_lock = threading.Lock()


def get_sentence_transformer():
    """–ü–æ–ª—É—á–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä SentenceTransformer (–ª–µ–Ω–∏–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è)"""
    global _sentence_transformer

    if _sentence_transformer is None:
        with _sentence_transformer_lock:
            # Double-check locking pattern
            if _sentence_transformer is None:
                print("[TRANSFORMER] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SentenceTransformer (–æ–¥–∏–Ω —Ä–∞–∑)...")
                from sentence_transformers import SentenceTransformer

                _sentence_transformer = SentenceTransformer(
                    "sentence-transformers/all-MiniLM-L6-v2"
                )
                print("[TRANSFORMER] ‚úÖ SentenceTransformer –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")

    return _sentence_transformer


def set_current_conversation_id(conversation_id: int):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å ID —Ç–µ–∫—É—â–µ–≥–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –¥–ª—è async –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
    _conversation_id_var.set(conversation_id)
    print(f"[CONTEXT] set_current_conversation_id: {conversation_id}")


def get_current_conversation_id() -> Optional[int]:
    """–ü–æ–ª—É—á–∏—Ç—å ID —Ç–µ–∫—É—â–µ–≥–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞"""
    conv_id = _conversation_id_var.get()
    print(f"[CONTEXT] get_current_conversation_id: {conv_id}")
    return conv_id


def _send_action_to_telegram(action_text: str) -> None:
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ –∞–≥–µ–Ω—Ç–∞ –≤ Telegram (–¥–æ–±–∞–≤–∏—Ç—å –≤ –æ—á–µ—Ä–µ–¥—å –¥–ª—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏)

    Args:
        action_text: –û–ø–∏—Å–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, "üîç –ü–æ–∏—Å–∫ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π")
    """
    try:
        conversation_id = get_current_conversation_id()
        if not conversation_id:
            print(f"[ACTION] –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –¥–µ–π—Å—Ç–≤–∏—è - –Ω–µ—Ç conversation_id")
            return

        print(f"[ACTION] –î–æ–±–∞–≤–ª—è—é –¥–µ–π—Å—Ç–≤–∏–µ –≤ –æ—á–µ—Ä–µ–¥—å: {action_text}")

        # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –≤ –æ—á–µ—Ä–µ–¥—å
        with _action_queue_lock:
            _action_queue.append(
                {"conversation_id": conversation_id, "action_text": action_text}
            )

        # –ü–ª–∞–Ω–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—á–µ—Ä–µ–¥–∏ –≤ –≥–ª–∞–≤–Ω–æ–º loop
        import asyncio

        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –≥–ª–∞–≤–Ω—ã–π loop –∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É
            from app.main import _main_loop

            if _main_loop and _main_loop.is_running():
                # –ü–ª–∞–Ω–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —á–µ—Ä–µ–∑ call_soon_threadsafe
                _main_loop.call_soon_threadsafe(
                    lambda: asyncio.ensure_future(
                        process_pending_actions(), loop=_main_loop
                    )
                )
                print(f"[ACTION] –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤ –≥–ª–∞–≤–Ω–æ–º loop")
        except Exception as schedule_error:
            print(f"[ACTION] –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É: {schedule_error}")

    except Exception as e:
        print(f"[ACTION ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ: {e}")
        logger.warning(f"Failed to queue action: {e}")


async def process_pending_actions():
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—Å–µ –æ–∂–∏–¥–∞—é—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ

    –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –¥–µ–π—Å—Ç–≤–∏–π –∏ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –∞–≥–µ–Ω—Ç–∞.
    """
    from app.bots import send_agent_action_to_telegram
    from app.db.database import TicketsSessionLocal
    from app.db.models import Ticket
    from sqlalchemy import select

    actions_to_process = []

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ –¥–µ–π—Å—Ç–≤–∏—è –∏–∑ –æ—á–µ—Ä–µ–¥–∏
    with _action_queue_lock:
        while _action_queue:
            actions_to_process.append(_action_queue.popleft())

    if not actions_to_process:
        return

    print(f"[ACTION] –û–±—Ä–∞–±–æ—Ç–∫–∞ {len(actions_to_process)} –¥–µ–π—Å—Ç–≤–∏–π")

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ
    for action_data in actions_to_process:
        try:
            conversation_id = action_data["conversation_id"]
            action_text = action_data["action_text"]

            # –ü–æ–ª—É—á–∞–µ–º chat_id –∏–∑ ticket
            async with TicketsSessionLocal() as session:
                stmt = select(Ticket).where(Ticket.id == conversation_id)
                result = await session.execute(stmt)
                ticket = result.scalar_one_or_none()

                if not ticket:
                    print(f"[ACTION] Ticket {conversation_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    continue

                # telegram_chat_id - —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞, –Ω—É–∂–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ int –¥–ª—è Telegram
                chat_id_str = ticket.telegram_chat_id
                if not chat_id_str:
                    print(f"[ACTION] –£ ticket {conversation_id} –Ω–µ—Ç telegram_chat_id")
                    continue

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ VK (VK id –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å 'vk_')
                if isinstance(chat_id_str, str) and chat_id_str.startswith("vk_"):
                    print(f"[ACTION] –ü—Ä–æ–ø—É—Å–∫–∞–µ–º VK —á–∞—Ç {chat_id_str}")
                    continue

                try:
                    chat_id = int(chat_id_str)
                except (ValueError, TypeError):
                    print(f"[ACTION] –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å chat_id: {chat_id_str}")
                    continue

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –≤ Telegram
            await send_agent_action_to_telegram(chat_id, action_text)
            print(f"[ACTION] ‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {action_text}")

        except Exception as e:
            print(f"[ACTION ERROR] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–µ–π—Å—Ç–≤–∏—è: {e}")
            logger.warning(f"Failed to process action: {e}")


# –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É –∞–≥–µ–Ω—Ç–æ–º –∏ –±–æ—Ç–æ–º
# –ö–ª—é—á - conversation_id, –∑–Ω–∞—á–µ–Ω–∏–µ - —Å–ø–∏—Å–æ–∫ –ø–æ—Ö–æ–∂–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
_similar_suggestions_storage: Dict[int, List[Dict[str, Any]]] = {}

# –•—Ä–∞–Ω–∏–º timestamp –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ–∫–∞–∑–∞ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ conversation
# –ß—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å –∫–Ω–æ–ø–∫–∞–º–∏ —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ
_last_suggestions_time: Dict[int, float] = {}

# –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –ø–æ–∫–∞–∑–∞–º–∏ –∫–Ω–æ–ø–æ–∫ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
MIN_SUGGESTIONS_INTERVAL = 60  # 1 –º–∏–Ω—É—Ç–∞


def store_similar_suggestions(conversation_id: int, suggestions: List[Dict[str, Any]]):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ—Ö–æ–∂–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞"""
    import time

    global _similar_suggestions_storage, _last_suggestions_time

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–ª–∏ –ª–∏ –º—ã –∫–Ω–æ–ø–∫–∏ –Ω–µ–¥–∞–≤–Ω–æ
    last_time = _last_suggestions_time.get(conversation_id, 0)
    current_time = time.time()

    if current_time - last_time < MIN_SUGGESTIONS_INTERVAL:
        logger.info(
            f"Skipping suggestions for conversation {conversation_id} - shown too recently "
            f"({int(current_time - last_time)}s ago, minimum {MIN_SUGGESTIONS_INTERVAL}s)"
        )
        return  # –ù–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º - —Å–ª–∏—à–∫–æ–º —Ä–∞–Ω–æ

    _similar_suggestions_storage[conversation_id] = suggestions
    _last_suggestions_time[conversation_id] = current_time
    logger.info(
        f"Stored {len(suggestions)} similar suggestions for conversation {conversation_id}"
    )


def get_similar_suggestions(conversation_id: int) -> List[Dict[str, Any]] | None:
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ—Ö–æ–∂–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –∏ –æ—á–∏—Å—Ç–∏—Ç—å —Ö—Ä–∞–Ω–∏–ª–∏—â–µ"""
    global _similar_suggestions_storage
    suggestions = _similar_suggestions_storage.pop(conversation_id, None)
    if suggestions:
        logger.info(
            f"Retrieved {len(suggestions)} similar suggestions for conversation {conversation_id}"
        )
    return suggestions


@tool
async def search_knowledge_base(query: str, suggest_similar: bool = False) -> str:
    """–ü–æ–∏—Å–∫ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π - —Ç–≤–æ–π –≥–ª–∞–≤–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç!

    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    - query: –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞
    - suggest_similar: –µ—Å–ª–∏ True, –ø–æ–∫–∞–∂–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é 3 –∫–Ω–æ–ø–∫–∏ —Å –ø–æ—Ö–æ–∂–∏–º–∏ –ø—Ä–æ–±–ª–µ–º–∞–º–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞.
      –ò—Å–ø–æ–ª—å–∑—É–π suggest_similar=True –¢–û–õ–¨–ö–û –∫–æ–≥–¥–∞:
      * –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–ø–∏—Å—ã–≤–∞–µ—Ç –æ–±—â—É—é –ø—Ä–æ–±–ª–µ–º—É –±–µ–∑ –¥–µ—Ç–∞–ª–µ–π (–Ω–∞–ø—Ä–∏–º–µ—Ä: "–∏–Ω—Ç–µ—Ä–Ω–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç", "–∫–æ–º–ø—å—é—Ç–µ—Ä —Ç–æ—Ä–º–æ–∑–∏—Ç")
      * –ï—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ—Ö–æ–∂–∏—Ö —Ä–µ—à–µ–Ω–∏–π –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –≤—ã–±—Ä–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–µ–µ
      * –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–¥–∞–ª –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –Ω—É–∂–µ–Ω –ø—Ä—è–º–æ–π –æ—Ç–≤–µ—Ç

    –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é (suggest_similar=False) - –æ–±—ã—á–Ω—ã–π –ø–æ–∏—Å–∫ —Å –ø—Ä—è–º—ã–º –æ—Ç–≤–µ—Ç–æ–º.
    """
    print(
        f"[AGENT ACTION] –ü–æ–∏—Å–∫ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π: '{query}' (suggest_similar={suggest_similar})"
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –≤ Telegram
    _send_action_to_telegram(
        f"üîç –ü–æ–∏—Å–∫ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π: {query[:50]}{'...' if len(query) > 50 else ''}"
    )

    try:
        from app.db.database import KnowledgeSessionLocal
        from app.db import tickets_crud as crud
        import numpy as np

        # –ü–æ–ª—É—á–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–æ–¥–µ–ª–∏ (–±—ã—Å—Ç—Ä–æ, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑)
        model = get_sentence_transformer()

        async with KnowledgeSessionLocal() as session:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ —á–∞–Ω–∫–∏
            chunks = await crud.load_all_chunks(session)

            if not chunks:
                print("[AGENT] –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –ø—É—Å—Ç–∞")
                return "–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –ø—É—Å—Ç–∞"

            print(f"[AGENT] –ü–æ–∏—Å–∫ —Å—Ä–µ–¥–∏ {len(chunks)} –∑–∞–ø–∏—Å–µ–π...")

            # –°–æ–∑–¥–∞–µ–º –≤–µ–∫—Ç–æ—Ä–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
            query_embedding = model.encode([query], convert_to_numpy=True)
            query_vector = query_embedding[0]

            # –ò—â–µ–º —Å—Ä–µ–¥–∏ —á–∞–Ω–∫–æ–≤ —Å —ç–º–±–µ–¥–¥–∏–Ω–≥–∞–º–∏
            results = []
            text_results = []  # –î–ª—è —á–∞–Ω–∫–æ–≤ –±–µ–∑ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤

            for chunk in chunks:
                if chunk.embedding is not None:
                    # –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫
                    chunk_vector = np.frombuffer(chunk.embedding, dtype=np.float32)
                    # –ö–æ—Å–∏–Ω—É—Å–Ω–æ–µ —Å—Ö–æ–¥—Å—Ç–≤–æ
                    similarity = np.dot(query_vector, chunk_vector) / (
                        np.linalg.norm(query_vector) * np.linalg.norm(chunk_vector)
                    )
                    results.append(
                        {
                            "id": chunk.id,
                            "content": chunk.content,
                            "source": chunk.source_file,
                            "score": float(similarity),
                            "type": "semantic",
                        }
                    )
                else:
                    # –¢–µ–∫—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫ –¥–ª—è —á–∞–Ω–∫–æ–≤ –±–µ–∑ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤
                    query_lower = query.lower()
                    if query_lower in chunk.content.lower():
                        relevance = chunk.content.lower().count(query_lower)
                        text_results.append(
                            {
                                "id": chunk.id,
                                "content": chunk.content,
                                "source": chunk.source_file,
                                "score": relevance / 10.0,  # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º
                                "type": "text",
                            }
                        )

            # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            all_results = results + text_results

            if not all_results:
                print(f"[AGENT] –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É: '{query}'")
                return f"–ü–æ –∑–∞–ø—Ä–æ—Å—É '{query}' –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π"

            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
            all_results.sort(key=lambda x: x["score"], reverse=True)

            print(f"[AGENT] –ù–∞–π–¥–µ–Ω–æ {len(all_results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")

            # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ç–æ–ø-3 —á–∞–Ω–∫–æ–≤ –¥–ª—è FAQ
            from app.rag.faq_service import track_chunk_usage

            for result in all_results[:3]:
                track_chunk_usage(result["id"], result["content"])

            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç –∏–∑ —Ç–æ–ø-3 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            response_parts = []
            for i, result in enumerate(all_results[:3], 1):
                content = result["content"]
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã Unicode
                try:
                    content = content.encode("cp1251", errors="ignore").decode("cp1251")
                except:
                    content = content.encode("ascii", errors="ignore").decode("ascii")

                if len(content) > 300:
                    content = content[:300] + "..."

                response_parts.append(
                    f"{i}. –ò—Å—Ç–æ—á–Ω–∏–∫: {result['source']}\n"
                    f"–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ: {content}\n"
                    f"(—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {result['score']:.3f}, —Ç–∏–ø: {result['type']})"
                )

            response = "\n\n".join(response_parts)

            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å –∫–Ω–æ–ø–∫–∏ —Å –ø–æ—Ö–æ–∂–∏–º–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏
            if suggest_similar and len(all_results) >= 3:
                print("[AGENT] –°–æ—Ö—Ä–∞–Ω—è—é –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è –ø–æ–∫–∞–∑–∞ –∫–Ω–æ–ø–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")

                # –ë–µ—Ä—ë–º —Ç–æ–ø-3
                top_3 = all_results[:3]
                suggestions = []

                for result in top_3:
                    # –°–æ–∑–¥–∞—ë–º –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –∫–Ω–æ–ø–∫–∏ (–ø–µ—Ä–≤—ã–µ 80 —Å–∏–º–≤–æ–ª–æ–≤)
                    preview = result["content"][:80].replace("\n", " ").strip()
                    if len(result["content"]) > 80:
                        preview += "..."

                    suggestions.append(
                        {
                            "id": result["id"],
                            "preview": preview,
                            "score": result["score"],
                            "source": result["source"],
                            "full_content": result[
                                "content"
                            ],  # –ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                        }
                    )

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ (–µ—Å–ª–∏ –∏–∑–≤–µ—Å—Ç–µ–Ω conversation_id)
                conversation_id = get_current_conversation_id()
                if conversation_id:
                    store_similar_suggestions(conversation_id, suggestions)
                    print(
                        f"[AGENT] –°–æ—Ö—Ä–∞–Ω–∏–ª {len(suggestions)} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –¥–ª—è conversation {conversation_id}"
                    )
                else:
                    print(
                        "[AGENT WARNING] conversation_id –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∫–Ω–æ–ø–∫–∏ –Ω–µ –±—É–¥—É—Ç –ø–æ–∫–∞–∑–∞–Ω—ã!"
                    )

                print(f"[AGENT] –ö–Ω–æ–ø–∫–∏ –±—É–¥—É—Ç –ø–æ–∫–∞–∑–∞–Ω—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º")

            print(
                f"[AGENT] –í–æ–∑–≤—Ä–∞—â–∞—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ (–¥–ª–∏–Ω–∞: {len(response)} —Å–∏–º–≤–æ–ª–æ–≤)"
            )
            return response

    except Exception as e:
        print(f"[AGENT ERROR] –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")
        logger.error(f"Error searching knowledge base: {e}")
        return f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π: {e}"


@tool
def improve_search_query(original_query: str, context: str = None) -> str:
    """–£–ª—É—á—à–µ–Ω–∏–µ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ —á–µ—Ä–µ–∑ LLM - –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∑–∞–ø—Ä–æ—Å –∏ —Å–æ–∑–¥–∞–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –ø–æ–∏—Å–∫–æ–≤—ã–µ —Ç–µ—Ä–º–∏–Ω—ã –¥–ª—è –ª—é–±–æ–π –ø—Ä–µ–¥–º–µ—Ç–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏."""
    print(f"[AGENT ACTION] –£–ª—É—á—à–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ —á–µ—Ä–µ–∑ LLM: '{original_query}'")

    try:
        from app.rag.service import get_llm_client
        import yaml

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        with open("configs/rag_config.yaml", "r", encoding="utf-8") as f:
            config = yaml.safe_load(f)

        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–º–ø—Ç –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
        improvement_prompt_template = config.get("agent", {}).get(
            "improve_search_prompt", ""
        )

        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç —Å –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–æ–π –∑–Ω–∞—á–µ–Ω–∏–π
        improvement_prompt = improvement_prompt_template.format(
            original_query=original_query,
            context=context if context else "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞",
        )

        # –ü–æ–ª—É—á–∞–µ–º LLM –∫–ª–∏–µ–Ω—Ç
        llm_client = get_llm_client()

        # –£–ª—É—á—à–∞–µ–º –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ LLM
        response = llm_client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": improvement_prompt}],
            max_tokens=100,
            temperature=0.3,
        )

        improved_query = response.choices[0].message.content.strip()

        # –£–±–∏—Ä–∞–µ–º –∫–∞–≤—ã—á–∫–∏ –µ—Å–ª–∏ LLM –∏—Ö –¥–æ–±–∞–≤–∏–ª
        if improved_query.startswith('"') and improved_query.endswith('"'):
            improved_query = improved_query[1:-1]

        if improved_query != original_query:
            print(f"[AGENT] –ó–∞–ø—Ä–æ—Å —É–ª—É—á—à–µ–Ω LLM: '{improved_query}'")
            return improved_query
        else:
            print(f"[AGENT] LLM —Ä–µ—à–∏–ª —á—Ç–æ –∑–∞–ø—Ä–æ—Å —É–∂–µ –æ–ø—Ç–∏–º–∞–ª–µ–Ω")
            return original_query

    except Exception as e:
        print(f"[AGENT ERROR] –û—à–∏–±–∫–∞ —É–ª—É—á—à–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: {e}")

        # –§–æ–ª–ª–±—ç–∫ –Ω–∞ –ø—Ä–æ—Å—Ç–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ
        simple_improvements = {
            "–ø—Ä–∏–Ω—Ç–µ—Ä": ["–ø—Ä–∏–Ω—Ç–µ—Ä", "–ø–µ—á–∞—Ç—å", "–ú–§–£", "—Å—Ç—Ä—É–π–Ω—ã–π", "–ª–∞–∑–µ—Ä–Ω—ã–π"],
            "–∫–æ–º–ø—å—é—Ç–µ—Ä": ["–∫–æ–º–ø—å—é—Ç–µ—Ä", "–ü–ö", "–Ω–æ—É—Ç–±—É–∫", "—Å–∏—Å—Ç–µ–º–Ω—ã–π –±–ª–æ–∫"],
            "–∏–Ω—Ç–µ—Ä–Ω–µ—Ç": ["–∏–Ω—Ç–µ—Ä–Ω–µ—Ç", "—Å–µ—Ç—å", "wi-fi", "–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ"],
            "–æ—à–∏–±–∫–∞": ["–æ—à–∏–±–∫–∞", "–ø—Ä–æ–±–ª–µ–º–∞", "—Å–±–æ–π", "–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"],
            "–ø—Ä–æ–≥—Ä–∞–º–º–∞": ["–ø—Ä–æ–≥—Ä–∞–º–º–∞", "–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", "—Å–æ—Ñ—Ç", "–ü–û"],
        }

        original_lower = original_query.lower()
        enhanced_terms = [original_query]

        for key, synonyms in simple_improvements.items():
            if key in original_lower:
                enhanced_terms.extend(synonyms[:3])  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 3 —Å–∏–Ω–æ–Ω–∏–º–∞
                break

        if len(enhanced_terms) > 1:
            improved_query = " ".join(enhanced_terms[:4])  # –ú–∞–∫—Å–∏–º—É–º 4 —Ç–µ—Ä–º–∏–Ω–∞
            print(f"[AGENT] –ó–∞–ø—Ä–æ—Å —É–ª—É—á—à–µ–Ω (fallback): '{improved_query}'")
            return improved_query
        else:
            print(f"[AGENT] –ó–∞–ø—Ä–æ—Å –æ—Å—Ç–∞–ª—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π")
            return original_query


def _classify_request_internal(
    dialogue_history: str = None, text: str = None, categories: List[str] = None
) -> str:
    """–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —Ñ—É–Ω–∫—Ü–∏—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è –ø—Ä—è–º–æ–≥–æ –≤—ã–∑–æ–≤–∞ –∏–∑ –±–æ—Ç–æ–≤ (–±–µ–∑ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞ @tool)."""
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    if dialogue_history:
        analysis_text = dialogue_history
        print(
            f"[AGENT ACTION] –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–∏–∞–ª–æ–≥–∞ —á–µ—Ä–µ–∑ LLM (–¥–ª–∏–Ω–∞: {len(dialogue_history)} —Å–∏–º–≤–æ–ª–æ–≤)"
        )
    elif text:
        analysis_text = text
        print(f"[AGENT ACTION] –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ —á–µ—Ä–µ–∑ LLM: '{text[:50]}...'")
    else:
        return "–û—à–∏–±–∫–∞: –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –Ω–∏ –¥–∏–∞–ª–æ–≥, –Ω–∏ —Ç–µ–∫—Å—Ç –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏"

    try:
        from app.rag.service import get_llm_client
        import yaml

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        with open("configs/rag_config.yaml", "r", encoding="utf-8") as f:
            config = yaml.safe_load(f)

        # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
        default_categories = [
            "–ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞",
            "–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞",
            "–°–µ—Ç—å",
            "–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å",
            "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ –ü–û",
            "–ê–ø–ø–∞—Ä–∞—Ç–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã",
            "–û–±—â–∏–π",
        ]
        available_categories = config.get("agent", {}).get(
            "categories", categories or default_categories
        )

        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
        categories_text = ", ".join(available_categories)
        classification_prompt_template = config.get("agent", {}).get(
            "classify_request_prompt", ""
        )

        classification_prompt = classification_prompt_template.format(
            categories_text=categories_text, analysis_text=analysis_text
        )

        # –ü–æ–ª—É—á–∞–µ–º LLM –∫–ª–∏–µ–Ω—Ç
        llm_client = get_llm_client()

        # –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ LLM
        response = llm_client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": classification_prompt}],
            max_tokens=100,
            temperature=0.1,
        )

        llm_result = response.choices[0].message.content.strip()

        # –ü–∞—Ä—Å–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        suggested_categories = [cat.strip() for cat in llm_result.split(",")]
        valid_categories = []

        for cat in suggested_categories:
            if cat in available_categories:
                valid_categories.append(cat)

        # –ï—Å–ª–∏ LLM –Ω–µ –≤–µ—Ä–Ω—É–ª –≤–∞–ª–∏–¥–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback
        if not valid_categories:
            text_lower = analysis_text.lower()
            category_keywords = {
                "–ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞": [
                    "—Å–µ—Ä–≤–µ—Ä",
                    "—Å–µ—Ç—å",
                    "–∂–µ–ª–µ–∑–æ",
                    "–æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ",
                    "–∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞",
                ],
                "–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞": [
                    "–∫–æ–¥",
                    "–ø—Ä–æ–≥—Ä–∞–º–º–∞",
                    "–±–∞–≥",
                    "–æ—à–∏–±–∫–∞",
                    "–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
                    "—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞",
                ],
                "–°–µ—Ç—å": ["–∏–Ω—Ç–µ—Ä–Ω–µ—Ç", "—Å–µ—Ç—å", "—Ä–æ—É—Ç–µ—Ä", "wifi", "–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ"],
                "–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å": [
                    "–ø–∞—Ä–æ–ª—å",
                    "–¥–æ—Å—Ç—É–ø",
                    "–ø—Ä–∞–≤–∞",
                    "–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å",
                    "–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞",
                ],
                "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ –ü–û": ["–ø—Ä–æ–≥—Ä–∞–º–º–∞", "—Å–æ—Ñ—Ç", "–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", "—É—Å—Ç–∞–Ω–æ–≤–∫–∞"],
                "–ê–ø–ø–∞—Ä–∞—Ç–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã": [
                    "–∫–æ–º–ø—å—é—Ç–µ—Ä",
                    "–ø—Ä–∏–Ω—Ç–µ—Ä",
                    "–º—ã—à—å",
                    "–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞",
                    "–º–æ–Ω–∏—Ç–æ—Ä",
                ],
                "–û–±—â–∏–π": [],
            }

            scores = {}
            for category, keywords in category_keywords.items():
                score = sum(1 for keyword in keywords if keyword in text_lower)
                if score > 0:
                    scores[category] = score

            if scores:
                # –ë–µ—Ä–µ–º —Ç–æ–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                sorted_categories = sorted(
                    scores.items(), key=lambda x: x[1], reverse=True
                )
                valid_categories = [
                    cat for cat, score in sorted_categories[:2]
                ]  # –ú–∞–∫—Å–∏–º—É–º 2 –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            else:
                valid_categories = ["–û–±—â–∏–π"]

        result_categories = ", ".join(valid_categories)
        print(f"[AGENT] –î–∏–∞–ª–æ–≥ –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω –∫–∞–∫: {result_categories}")
        logger.info(f"Request classified as: {result_categories}")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –≤ Telegram
        _send_action_to_telegram(f"üè∑Ô∏è –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è: {result_categories}")

        return f"–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –ø—Ä–æ–±–ª–µ–º—ã: {result_categories}"

    except Exception as e:
        print(f"[AGENT ERROR] –û—à–∏–±–∫–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}")
        logger.error(f"Classification error: {e}")
        return "–û—à–∏–±–∫–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏. –ö–∞—Ç–µ–≥–æ—Ä–∏—è: –û–±—â–∏–π"


@tool
def classify_request(
    dialogue_history: str = None, text: str = None, categories: List[str] = None
) -> str:
    """–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ —á–µ—Ä–µ–∑ LLM - –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–µ—Å—å –¥–∏–∞–ª–æ–≥ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –¥–ª—è —Ç–æ—á–Ω–æ–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø—Ä–æ–±–ª–µ–º—ã. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–æ–±–ª–µ–º –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –Ω–∞–∑–Ω–∞—á–∏—Ç—å –∑–∞—è–≤–∫–µ."""
    return _classify_request_internal(dialogue_history, text, categories)


def _set_priority_internal(dialogue_history: str) -> str:
    """–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —Ñ—É–Ω–∫—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –¥–ª—è –ø—Ä—è–º–æ–≥–æ –≤—ã–∑–æ–≤–∞ –∏–∑ –±–æ—Ç–æ–≤ (–±–µ–∑ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞ @tool)."""
    print(
        f"[AGENT ACTION] –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –¥–∏–∞–ª–æ–≥–∞ —á–µ—Ä–µ–∑ LLM (–¥–ª–∏–Ω–∞: {len(dialogue_history)} —Å–∏–º–≤–æ–ª–æ–≤)"
    )

    try:
        from app.rag.service import get_llm_client
        import yaml

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        with open("configs/rag_config.yaml", "r", encoding="utf-8") as f:
            config = yaml.safe_load(f)

        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–º–ø—Ç –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
        priority_prompt_template = config.get("agent", {}).get(
            "set_priority_prompt", ""
        )

        if not priority_prompt_template:
            print("[AGENT WARNING] –ü—Ä–æ–º–ø—Ç –¥–ª—è set_priority –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥–µ")
            return "medium"

        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
        priority_prompt = priority_prompt_template.format(
            dialogue_text=dialogue_history
        )

        # –ü–æ–ª—É—á–∞–µ–º LLM –∫–ª–∏–µ–Ω—Ç
        llm_client = get_llm_client()

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —á–µ—Ä–µ–∑ LLM
        response = llm_client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": priority_prompt}],
            max_tokens=10,
            temperature=0.1,
        )

        llm_result = response.choices[0].message.content.strip().lower()

        # –ü–∞—Ä—Å–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å
        valid_priorities = ["low", "medium", "high"]

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∏–∑ –æ—Ç–≤–µ—Ç–∞ LLM
        priority = "medium"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
        for valid_priority in valid_priorities:
            if valid_priority in llm_result:
                priority = valid_priority
                break

        print(f"[AGENT] –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–∏–∞–ª–æ–≥–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –∫–∞–∫: {priority}")
        logger.info(f"Dialogue priority set to: {priority}")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –≤ Telegram
        priority_labels = {"low": "–Ω–∏–∑–∫–∏–π", "medium": "—Å—Ä–µ–¥–Ω–∏–π", "high": "–≤—ã—Å–æ–∫–∏–π"}
        _send_action_to_telegram(
            f"‚ö° –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {priority_labels.get(priority, priority)}"
        )

        return priority

    except Exception as e:
        print(f"[AGENT ERROR] –û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞: {e}")
        logger.error(f"Priority determination error: {e}")
        return "medium"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—Ä–∏ –æ—à–∏–±–∫–µ


@tool
def set_priority(dialogue_history: str = None) -> str:
    """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –∑–∞—è–≤–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞–∂–Ω–æ—Å—Ç–∏ –¥–∏–∞–ª–æ–≥–∞ - –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–µ—Å—å –¥–∏–∞–ª–æ–≥ –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç (–Ω–∏–∑–∫–∏–π/—Å—Ä–µ–¥–Ω–∏–π/–≤—ã—Å–æ–∫–∏–π).

    –ò—Å–ø–æ–ª—å–∑—É–π —ç—Ç–æ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –∫–æ–≥–¥–∞:
    - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–ø–∏—Å—ã–≤–∞–µ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫—É—é –ø—Ä–æ–±–ª–µ–º—É (–±–ª–æ–∫–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É, –ø–æ—Ç–µ—Ä—è –¥–∞–Ω–Ω—ã—Ö, –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å)
    - –ü—Ä–æ–±–ª–µ–º–∞ –≤–ª–∏—è–µ—Ç –Ω–∞ –º–Ω–æ–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–ª–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Å–∏—Å—Ç–µ–º—ã
    - –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç–æ–Ω —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ —Å—Ä–æ—á–Ω–æ—Å—Ç—å
    - –ù—É–∂–Ω–æ –ø–æ–Ω—è—Ç—å, –Ω–∞—Å–∫–æ–ª—å–∫–æ –≤–∞–∂–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞ –¥–ª—è –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏

    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    - dialogue_history: –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞.
    """
    if not dialogue_history:
        return (
            "–û—à–∏–±–∫–∞: –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞"
        )

    priority = _set_priority_internal(dialogue_history)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –≤ ticket —á–µ—Ä–µ–∑ conversation_id
    conversation_id = get_current_conversation_id()
    print(f"[AGENT] conversation_id = {conversation_id}")

    if conversation_id:
        print(f"[AGENT] –ù–∞—á–∏–Ω–∞—é –ø—Ä–æ—Ü–µ—Å—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞: {priority}")
        try:
            import asyncio
            from app.db.database import TicketsSessionLocal
            from app.db import tickets_crud as crud

            async def update_priority():
                print(
                    f"[AGENT] –ù–∞—á–∏–Ω–∞—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –¥–ª—è ticket {conversation_id} –Ω–∞ {priority}"
                )
                async with TicketsSessionLocal() as session:
                    # –ü–æ–ª—É—á–∞–µ–º ticket –ø–æ conversation_id (—ç—Ç–æ ID —Ç–∏–∫–µ—Ç–∞)
                    ticket = await crud.get_ticket_by_id(session, conversation_id)
                    if ticket:
                        old_priority = ticket.priority
                        ticket.priority = priority
                        await session.commit()
                        await session.refresh(ticket)
                        print(
                            f"[AGENT] ‚úÖ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç ticket {conversation_id} –∏–∑–º–µ–Ω–µ–Ω: {old_priority} -> {ticket.priority}"
                        )

                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º
                        try:
                            from app.main import connection_manager
                            from app.db import TicketRead

                            # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ç–∏–∫–µ—Ç–æ–≤ –¥–ª—è broadcast
                            tickets = await crud.list_tickets(session, archived=False)
                            from app.main import _serialize_tickets

                            tickets_payload = _serialize_tickets(tickets)
                            await connection_manager.broadcast_conversations(
                                tickets_payload
                            )
                            print(
                                f"[AGENT] ‚úÖ Broadcasted priority update for ticket {conversation_id}"
                            )
                        except Exception as broadcast_error:
                            print(
                                f"[AGENT WARNING] Failed to broadcast priority update: {broadcast_error}"
                            )
                            logger.exception(f"Broadcast error: {broadcast_error}")
                    else:
                        print(
                            f"[AGENT WARNING] Ticket {conversation_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞"
                        )

            # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
            # –ü—Ä–æ–±–ª–µ–º–∞: –∞–≥–µ–Ω—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ, –Ω—É–∂–µ–Ω –Ω–æ–≤—ã–π event loop
            print(f"[AGENT] –ü—ã—Ç–∞—é—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å update_priority...")
            try:
                # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π loop
                try:
                    loop = asyncio.get_running_loop()
                    # Loop —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç - —Å–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É
                    print(f"[AGENT] Found running loop, creating task")
                    asyncio.create_task(update_priority())
                    print(f"[AGENT] Task created in running loop")
                except RuntimeError:
                    # –ù–µ—Ç —Ä–∞–±–æ—Ç–∞—é—â–µ–≥–æ loop - —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
                    print(
                        f"[AGENT] No running loop, creating new one with asyncio.run()"
                    )
                    asyncio.run(update_priority())
                    print(f"[AGENT] asyncio.run() completed")
            except Exception as loop_error:
                print(f"[AGENT ERROR] Loop error: {loop_error}")
                logger.exception(f"Event loop error: {loop_error}")

        except Exception as e:
            print(f"[AGENT ERROR] –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –≤ –ë–î: {e}")
            logger.exception(f"Failed to save priority to database: {e}")
    else:
        print(
            f"[AGENT WARNING] conversation_id –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –Ω–µ –º–æ–≥—É —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç"
        )

    priority_labels = {
        "low": "–Ω–∏–∑–∫–∏–π",
        "medium": "—Å—Ä–µ–¥–Ω–∏–π",
        "high": "–≤—ã—Å–æ–∫–∏–π",
    }

    return f"–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∑–∞—è–≤–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {priority_labels.get(priority, priority)}"


@tool
def create_it_ticket(problem_description: str, location: str = "–Ω–µ —É–∫–∞–∑–∞–Ω–æ") -> str:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–µ–∑–¥ IT-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ –¥–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º –Ω–∞ –º–µ—Å—Ç–µ.

    –í–ê–ñ–ù–û: –ò—Å–ø–æ–ª—å–∑—É–π –î–í–£–•–≠–¢–ê–ü–ù–´–ô –ø—Ä–æ—Ü–µ—Å—Å:
    1. –ü–ï–†–í–´–ô –†–ê–ó –≤—ã–∑—ã–≤–∞–π –ë–ï–ó location (–∏–ª–∏ —Å "–Ω–µ —É–∫–∞–∑–∞–Ω–æ") - —ç—Ç–æ —Å–æ–∑–¥–∞—Å—Ç –ß–ï–†–ù–û–í–ò–ö –∑–∞—è–≤–∫–∏
       –ê–≥–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω —Å–ø—Ä–æ—Å–∏—Ç—å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–æ—á–Ω—É—é –ª–æ–∫–∞—Ü–∏—é (–∫–∞–±–∏–Ω–µ—Ç/–æ—Ñ–∏—Å/—ç—Ç–∞–∂)
    2. –í–¢–û–†–û–ô –†–ê–ó –≤—ã–∑—ã–≤–∞–π —Å –ö–û–ù–ö–†–ï–¢–ù–û–ô –ª–æ–∫–∞—Ü–∏–µ–π - —ç—Ç–æ –ó–ê–í–ï–†–®–ò–¢ –∑–∞—è–≤–∫—É —Å –≤—Ä–µ–º–µ–Ω–µ–º –∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º

    –ò—Å–ø–æ–ª—å–∑—É–π —ç—Ç–æ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –∫–æ–≥–¥–∞:
    - –ü—Ä–æ–±–ª–µ–º–∞ —Ç—Ä–µ–±—É–µ—Ç —Ñ–∏–∑–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ (—Å–ª–æ–º–∞–Ω–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ, –Ω—É–∂–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∞/–Ω–∞—Å—Ç—Ä–æ–π–∫–∞)
    - –ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –Ω–∞ –º–µ—Å—Ç–µ
    - –ü—Ä–æ–±–ª–µ–º—ã —Å –ø—Ä–∏–Ω—Ç–µ—Ä–∞–º–∏, –∫–æ–º–ø—å—é—Ç–µ—Ä–∞–º–∏, —Å–µ—Ç–µ–≤—ã–º –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ–º —Ç—Ä–µ–±—É—é—â–∏–µ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–≥–æ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–∞
    - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–Ω–æ –ø—Ä–æ—Å–∏—Ç "–ø—Ä–∏–µ—Ö–∞—Ç—å", "–ø–æ–¥–æ–π—Ç–∏", "–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ –º–µ—Å—Ç–µ"

    –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π –¥–ª—è:
    - –ü—Ä–æ–≥—Ä–∞–º–º–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ —Ä–µ—à–∏—Ç—å —É–¥–∞–ª–µ–Ω–Ω–æ
    - –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π –∏ –≤–æ–ø—Ä–æ—Å–æ–≤
    - –ü—Ä–æ–±–ª–µ–º —Å –¥–æ—Å—Ç—É–ø–∞–º–∏ –∏ –ø–∞—Ä–æ–ª—è–º–∏

    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    - problem_description: –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞
    - location: –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ (–∫–∞–±–∏–Ω–µ—Ç, –æ—Ñ–∏—Å, —ç—Ç–∞–∂). –ï—Å–ª–∏ "–Ω–µ —É–∫–∞–∑–∞–Ω–æ" - —ç—Ç–æ —á–µ—Ä–Ω–æ–≤–∏–∫.

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
    - –ß–µ—Ä–Ω–æ–≤–∏–∫: –ø—Ä–æ—Å–∏—Ç —É—Ç–æ—á–Ω–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é
    - –ì–æ—Ç–æ–≤–∞—è –∑–∞—è–≤–∫–∞: –Ω–æ–º–µ—Ä, —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç, –≤—Ä–µ–º—è –ø—Ä–∏–±—ã—Ç–∏—è
    """
    import random
    import datetime
    import asyncio

    print(f"[AGENT ACTION] –°–æ–∑–¥–∞–Ω–∏–µ/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–µ–∑–¥ IT-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞")
    print(f"[IT TICKET] –ü—Ä–æ–±–ª–µ–º–∞: {problem_description}")
    print(f"[IT TICKET] –õ–æ–∫–∞—Ü–∏—è: {location}")

    conversation_id = get_current_conversation_id()
    print(f"[IT TICKET] conversation_id: {conversation_id}")

    if not conversation_id:
        logger.warning("create_it_ticket –≤—ã–∑–≤–∞–Ω –±–µ–∑ conversation_id")
        return "‚ö†Ô∏è –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–µ–∫—É—â–∏–π –¥–∏–∞–ª–æ–≥"

    # –†–µ–∑—É–ª—å—Ç–∞—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤–µ—Ä–Ω—ë–º
    result_holder = {"result": None}

    async def process_it_ticket():
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ IT-–∑–∞—è–≤–∫–∏"""
        from app.db.database import TicketsSessionLocal
        from app.db.models import Ticket

        async with TicketsSessionLocal() as session:
            try:
                # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–∫–µ—Ç –∏–∑ –ë–î
                from sqlalchemy import select

                stmt = select(Ticket).where(Ticket.id == conversation_id)
                result = await session.execute(stmt)
                ticket = result.scalar_one_or_none()

                if not ticket:
                    logger.warning(f"Ticket {conversation_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    result_holder["result"] = "‚ö†Ô∏è –û—à–∏–±–∫–∞: –∑–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
                    return

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Å–æ–∑–¥–∞–Ω–Ω–∞—è IT-–∑–∞—è–≤–∫–∞
                if ticket.it_ticket_number:
                    print(
                        f"[IT TICKET] –ó–∞—è–≤–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {ticket.it_ticket_number}"
                    )
                    result_holder["result"] = (
                        f"‚ÑπÔ∏è –ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–µ–∑–¥ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ —É–∂–µ —Å–æ–∑–¥–∞–Ω–∞ —Ä–∞–Ω–µ–µ:\n"
                        f"üìã –ù–æ–º–µ—Ä: {ticket.it_ticket_number}\n\n"
                        f"–ï—Å–ª–∏ –Ω—É–∂–Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–æ–º–æ—â—å, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É."
                    )
                    return

                # –ï—Å–ª–∏ –ª–æ–∫–∞—Ü–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω–∞ - —Å–æ–∑–¥–∞–µ–º –ß–ï–†–ù–û–í–ò–ö
                if location == "–Ω–µ —É–∫–∞–∑–∞–Ω–æ" or not location or location.strip() == "":
                    print("[IT TICKET] –°–æ–∑–¥–∞–Ω–∏–µ —á–µ—Ä–Ω–æ–≤–∏–∫–∞ - –∑–∞–ø—Ä–æ—Å –ª–æ–∫–∞—Ü–∏–∏")

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –≤ Telegram
                    _send_action_to_telegram(
                        f"üìã –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–∞—è–≤–∫–∏ IT (—Ç—Ä–µ–±—É–µ—Ç—Å—è –ª–æ–∫–∞—Ü–∏—è)"
                    )

                    result_holder["result"] = (
                        "‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–µ–∑–¥ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞!\n\n"
                        "üìç –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Ç–æ—á–Ω–∏—Ç–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:\n"
                        "- –ê–¥—Ä–µ—Å –∏ –Ω–æ–º–µ—Ä –∫–∞–±–∏–Ω–µ—Ç–∞/–æ—Ñ–∏—Å–∞\n"
                        "- –≠—Ç–∞–∂\n"
                        "- –ö–æ—Ä–ø—É—Å (–µ—Å–ª–∏ –ø—Ä–∏–º–µ–Ω–∏–º–æ)\n\n"
                        "–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É –±—ã—Å—Ç—Ä–µ–µ –Ω–∞–π—Ç–∏ –≤–∞—Å."
                    )
                    return

                # –õ–æ–∫–∞—Ü–∏—è —É–∫–∞–∑–∞–Ω–∞ - —Å–æ–∑–¥–∞–µ–º –ü–û–õ–ù–£–Æ –∑–∞—è–≤–∫—É
                print("[IT TICKET] –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–π –∑–∞—è–≤–∫–∏ —Å –ª–æ–∫–∞—Ü–∏–µ–π")

                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏
                ticket_number = f"IT-{random.randint(1000, 9999)}"

                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è –ø—Ä–∏–±—ã—Ç–∏—è (—á–µ—Ä–µ–∑ 30-60 –º–∏–Ω—É—Ç)
                arrival_minutes = random.randint(30, 60)
                arrival_time = datetime.datetime.now() + datetime.timedelta(
                    minutes=arrival_minutes
                )
                arrival_str = arrival_time.strftime("%H:%M")

                # –ù–∞–∑–Ω–∞—á–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞
                specialists = [
                    "–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤",
                    "–ú–∞—Ä–∏—è –°–∏–¥–æ—Ä–æ–≤–∞",
                    "–ê–ª–µ–∫—Å–µ–π –ö–æ–∑–ª–æ–≤",
                    "–ï–ª–µ–Ω–∞ –í–æ–ª–∫–æ–≤–∞",
                ]
                assigned_specialist = random.choice(specialists)

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏ –≤ –ë–î
                ticket.it_ticket_number = ticket_number
                await session.commit()

                logger.info(
                    f"IT ticket created: {ticket_number}, specialist: {assigned_specialist}, "
                    f"arrival in {arrival_minutes} min, location: {location}"
                )

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ —Å –¥–µ—Ç–∞–ª—è–º–∏ –≤ Telegram
                _send_action_to_telegram(
                    f"üìù –°–æ–∑–¥–∞–Ω–∞ IT-–∑–∞—è–≤–∫–∞ #{ticket_number}\n"
                    f"üë§ –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç: {assigned_specialist}\n"
                    f"‚è∞ –ü—Ä–∏–±—ã—Ç–∏–µ: ~{arrival_minutes} –º–∏–Ω"
                )

                result_holder["result"] = (
                    f"‚úÖ –ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞!\n\n"
                    f"üìã –ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏: {ticket_number}\n"
                    f"üë§ –ù–∞–∑–Ω–∞—á–µ–Ω —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç: {assigned_specialist}\n"
                    f"‚è∞ –û–∂–∏–¥–∞–µ–º–æ–µ –≤—Ä–µ–º—è –ø—Ä–∏–±—ã—Ç–∏—è: {arrival_str} (–ø—Ä–∏–º–µ—Ä–Ω–æ —á–µ—Ä–µ–∑ {arrival_minutes} –º–∏–Ω—É—Ç)\n"
                    f"üìç –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: {location}\n\n"
                    f"–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –ø–µ—Ä–µ–¥ –ø—Ä–∏–µ–∑–¥–æ–º. "
                    f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –±—É–¥—å—Ç–µ –Ω–∞ –º–µ—Å—Ç–µ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏."
                )

                print(f"[IT TICKET] –ó–∞—è–≤–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {ticket_number}")

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ IT-–∑–∞—è–≤–∫–∏: {e}")
                result_holder["result"] = f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏: {str(e)}"

    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
    try:
        try:
            loop = asyncio.get_running_loop()
            # Loop —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç - —Å–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –∏ –∂–¥—ë–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            print(f"[IT TICKET] Found running loop, creating task")
            task = asyncio.create_task(process_it_ticket())
            # –ù–µ –º–æ–∂–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å await –≤ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º run_coroutine_threadsafe –µ—Å–ª–∏ –µ—Å—Ç—å loop
            import concurrent.futures

            future = asyncio.run_coroutine_threadsafe(process_it_ticket(), loop)
            future.result(timeout=5)  # –ñ–¥—ë–º –¥–æ 5 —Å–µ–∫—É–Ω–¥
            print(f"[IT TICKET] Task completed via run_coroutine_threadsafe")
        except RuntimeError:
            # –ù–µ—Ç —Ä–∞–±–æ—Ç–∞—é—â–µ–≥–æ loop - —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
            print(f"[IT TICKET] No running loop, creating new one with asyncio.run()")
            asyncio.run(process_it_ticket())
            print(f"[IT TICKET] asyncio.run() completed")
    except Exception as loop_error:
        print(f"[IT TICKET ERROR] Loop error: {loop_error}")
        logger.exception(f"Event loop error: {loop_error}")
        return f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(loop_error)}"

    return result_holder.get("result") or "‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"


@tool
def call_operator() -> str:
    """–í–ù–ò–ú–ê–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–π –¢–û–õ–¨–ö–û –≤ –∫—Ä–∞–π–Ω–∏—Ö —Å–ª—É—á–∞—è—Ö! –í—ã–∑—ã–≤–∞–µ—Ç –∂–∏–≤–æ–≥–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –æ—á–µ–Ω—å —Å–ª–æ–∂–Ω—ã—Ö —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ —Ä–µ—à–∏—Ç—å —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –∏–ª–∏ —á–µ—Ä–µ–∑ –ø–æ–∏—Å–∫ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π. –ü–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ–ø—Ä–æ–±—É–π –≤—Å–µ –¥—Ä—É–≥–∏–µ —Å–ø–æ—Å–æ–±—ã –ø–æ–º–æ—á—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    print(
        "[AGENT ACTION] –í–´–ó–û–í –û–ü–ï–†–ê–¢–û–†–ê! –ü–µ—Ä–µ–¥–∞—á–∞ —Å–ª–æ–∂–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∂–∏–≤–æ–º—É —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É"
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –≤ Telegram
    _send_action_to_telegram("üë§ –í—ã–∑–æ–≤ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞")

    logger.info("Operator call requested")
    return "–ó–∞–ø—Ä–æ—Å –ø–µ—Ä–µ–¥–∞–Ω –æ–ø–µ—Ä–∞—Ç–æ—Ä—É. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è."


@tool
def get_system_status() -> str:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã - –∏—Å–ø–æ–ª—å–∑—É–π –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º. –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π –∏ —Å–∏—Å—Ç–µ–º—ã."""
    print("[AGENT ACTION] –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã")

    try:
        # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –±–µ–∑ async –æ–ø–µ—Ä–∞—Ü–∏–π
        import datetime

        current_time = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")

        print(f"[AGENT] –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ, –≤—Ä–µ–º—è: {current_time}")

        return (
            f"–°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ. –í—Ä–µ–º—è: {current_time}. –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –¥–æ—Å—Ç—É–ø–Ω–∞."
        )

    except Exception as e:
        print(f"[AGENT ERROR] –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}")
        logger.error(f"System status error: {e}")
        return "–í–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã."


@tool
async def get_support_report() -> str:
    """–ü–æ–ª—É—á–∏—Ç—å –æ—Ç—á—ë—Ç –æ —Ç–µ–∫—É—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Å–ª—É–∂–±—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏.

    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á—ë—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ:
    - –û–±—â–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –∑–∞—è–≤–æ–∫ (–≤—Å–µ–≥–æ, –∑–∞ –¥–µ–Ω—å, –∑–∞ –Ω–µ–¥–µ–ª—é)
    - –°—Ä–µ–¥–Ω–µ–º –≤—Ä–µ–º–µ–Ω–∏ —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º
    - –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º (–æ—Ç–∫—Ä—ã—Ç–æ, –≤ —Ä–∞–±–æ—Ç–µ, –∑–∞–∫—Ä—ã—Ç–æ, –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–æ)
    - –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º (–Ω–∏–∑–∫–∏–π, —Å—Ä–µ–¥–Ω–∏–π, –≤—ã—Å–æ–∫–∏–π)
    - –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫–∞—Ö (—Å IT-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º, –æ–∂–∏–¥–∞—é—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞)
    - –¢–æ–ø-5 –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø—Ä–æ–±–ª–µ–º
    - –°–∞–º—ã—Ö —Å—Ç–∞—Ä—ã—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–∫–∞—Ö (—Ç–æ–ø-3)
    - –ê–Ω–∞–ª–∏–∑–µ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —Å–ª—É—á–∞–π–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤ (3 —à—Ç)

    –ö–û–ì–î–ê –ò–°–ü–û–õ–¨–ó–û–í–ê–¢–¨:
    - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç "–∫–∞–∫–∞—è —Å–∏—Ç—É–∞—Ü–∏—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫–µ?"
    - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç —É–∑–Ω–∞—Ç—å "—Å–∫–æ–ª—å–∫–æ –∑–∞—è–≤–æ–∫ –≤ –æ—á–µ—Ä–µ–¥–∏?"
    - –ó–∞–ø—Ä–æ—Å –æ—Ç—á—ë—Ç–∞ –æ —Ä–∞–±–æ—Ç–µ —Å–ª—É–∂–±—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏
    - –í–æ–ø—Ä–æ—Å—ã –æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã
    - "–ü–æ–∫–∞–∂–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", "–î–∞–π –æ—Ç—á—ë—Ç"

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á—ë—Ç —Å–æ –≤—Å–µ–º–∏ –º–µ—Ç—Ä–∏–∫–∞–º–∏.
    –ï—Å–ª–∏ –∫–∞–∫–∏—Ö-—Ç–æ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç, –æ—Ç—á—ë—Ç –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
    """
    import datetime
    from datetime import timedelta

    print(f"[AGENT ACTION] –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á—ë—Ç–∞ –æ —Å–ª—É–∂–±–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –≤ Telegram
    _send_action_to_telegram("üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á—ë—Ç–∞ –æ —Å–ª—É–∂–±–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏...")

    try:
        from app.db import tickets_crud as crud
        from app.db.models import Ticket, TicketStatus, Message
        from app.bots.telegram_bot import _session_maker
        from sqlalchemy import select, func, and_

        if not _session_maker:
            print("[REPORT ERROR] session_maker –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return "‚ö†Ô∏è –û—à–∏–±–∫–∞: –ë–î –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞"

        async with _session_maker() as session:
            # 1. –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—è–≤–æ–∫
            total_result = await session.execute(
                select(func.count()).select_from(Ticket)
            )
            total_tickets = total_result.scalar_one() or 0

            # 2. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
            status_stats = {}
            for status in [
                TicketStatus.OPEN,
                TicketStatus.IN_PROGRESS,
                TicketStatus.CLOSED,
                TicketStatus.ARCHIVED,
            ]:
                result = await session.execute(
                    select(func.count())
                    .select_from(Ticket)
                    .where(Ticket.status == status)
                )
                status_stats[status.value] = result.scalar_one() or 0

            # 3. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º
            priority_stats = {}
            for priority in ["low", "medium", "high"]:
                result = await session.execute(
                    select(func.count())
                    .select_from(Ticket)
                    .where(Ticket.priority == priority)
                )
                priority_stats[priority] = result.scalar_one() or 0

            # 4. –ó–∞—è–≤–∫–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
            today = datetime.datetime.utcnow().replace(
                hour=0, minute=0, second=0, microsecond=0
            )
            today_result = await session.execute(
                select(func.count())
                .select_from(Ticket)
                .where(Ticket.created_at >= today)
            )
            tickets_today = today_result.scalar_one() or 0

            # 5. –ó–∞—è–≤–∫–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
            week_ago = datetime.datetime.utcnow() - timedelta(days=7)
            week_result = await session.execute(
                select(func.count())
                .select_from(Ticket)
                .where(Ticket.created_at >= week_ago)
            )
            tickets_this_week = week_result.scalar_one() or 0

            # 6. –ó–∞—è–≤–∫–∏ —Å IT-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º
            it_tickets_result = await session.execute(
                select(func.count())
                .select_from(Ticket)
                .where(
                    and_(
                        Ticket.it_ticket_number.isnot(None),
                        Ticket.status != TicketStatus.CLOSED,
                    )
                )
            )
            active_it_tickets = it_tickets_result.scalar_one() or 0

            # 7. –ó–∞—è–≤–∫–∏ –æ–∂–∏–¥–∞—é—â–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
            operator_requested_result = await session.execute(
                select(func.count())
                .select_from(Ticket)
                .where(
                    and_(
                        Ticket.operator_requested == True,
                        Ticket.status != TicketStatus.CLOSED,
                    )
                )
            )
            operator_requests = operator_requested_result.scalar_one() or 0

            # 8. –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º (–¥–ª—è –∑–∞–∫—Ä—ã—Ç—ã—Ö –∑–∞—è–≤–æ–∫)
            closed_tickets_result = await session.execute(
                select(Ticket).where(
                    and_(
                        Ticket.status == TicketStatus.CLOSED,
                        Ticket.closed_at.isnot(None),
                    )
                )
            )
            closed_tickets = closed_tickets_result.scalars().all()

            avg_resolution_time = None
            if closed_tickets:
                total_time = sum(
                    [
                        (ticket.closed_at - ticket.created_at).total_seconds()
                        for ticket in closed_tickets
                    ]
                )
                avg_seconds = total_time / len(closed_tickets)
                avg_hours = int(avg_seconds / 3600)
                avg_minutes = int((avg_seconds % 3600) / 60)
                avg_resolution_time = f"{avg_hours}—á {avg_minutes}–º"

            # 9. –¢–æ–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø—Ä–æ–±–ª–µ–º
            categories_result = await session.execute(
                select(Ticket.classification, func.count())
                .where(Ticket.classification.isnot(None))
                .group_by(Ticket.classification)
                .order_by(func.count().desc())
                .limit(5)
            )
            top_categories = categories_result.all()

            print(f"[REPORT] –ù–∞–π–¥–µ–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {len(top_categories)}")
            if top_categories:
                for cat, count in top_categories:
                    print(f"[REPORT]   - {cat}: {count} –∑–∞—è–≤–æ–∫")

            # 10. –°–ª—É—á–∞–π–Ω—ã–µ 3 –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å –∑–∞–∫—Ä—ã—Ç—ã–µ)
            import random

            sample_tickets_result = await session.execute(
                select(Ticket)
                .where(Ticket.status == TicketStatus.CLOSED)
                .order_by(func.random())
                .limit(3)
            )
            sample_tickets = sample_tickets_result.scalars().all()

            print(
                f"[REPORT] –ù–∞–π–¥–µ–Ω–æ –∑–∞–∫—Ä—ã—Ç—ã—Ö –∑–∞—è–≤–æ–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: {len(sample_tickets)}"
            )

            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è sample_tickets
            sample_dialogs = []
            for ticket in sample_tickets:
                messages_result = await session.execute(
                    select(Message)
                    .where(Message.ticket_id == ticket.id)
                    .order_by(Message.created_at)
                )
                messages = messages_result.scalars().all()
                if messages:
                    sample_dialogs.append(
                        {
                            "ticket_id": ticket.id,
                            "classification": ticket.classification or "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏",
                            "messages": messages,
                        }
                    )

            print(f"[REPORT] –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–æ –¥–∏–∞–ª–æ–≥–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: {len(sample_dialogs)}")

            # 11. –°–∞–º—ã–µ —Å—Ç–∞—Ä—ã–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ –∑–∞—è–≤–∫–∏
            oldest_tickets_result = await session.execute(
                select(Ticket)
                .where(Ticket.status.in_([TicketStatus.OPEN, TicketStatus.IN_PROGRESS]))
                .order_by(Ticket.created_at)
                .limit(3)
            )
            oldest_tickets = oldest_tickets_result.scalars().all()

            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á—ë—Ç
            current_time = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")

            report_lines = [
                f"üìä –û–¢–ß–Å–¢ –û –°–õ–£–ñ–ë–ï –ü–û–î–î–ï–†–ñ–ö–ò",
                f"‚è∞ –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω: {current_time}",
                f"",
                f"üìà –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:",
                f"   ‚Ä¢ –í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫: {total_tickets}",
                f"   ‚Ä¢ –ó–∞ —Å–µ–≥–æ–¥–Ω—è: {tickets_today}",
                f"   ‚Ä¢ –ó–∞ –Ω–µ–¥–µ–ª—é: {tickets_this_week}",
            ]

            # –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è —Ä–µ—à–µ–Ω–∏—è
            if avg_resolution_time:
                report_lines.append(
                    f"   ‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è —Ä–µ—à–µ–Ω–∏—è: {avg_resolution_time}"
                )
            else:
                report_lines.append(f"   ‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è —Ä–µ—à–µ–Ω–∏—è: –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç")

            report_lines.extend(
                [
                    f"",
                    f"üìã –ü–û –°–¢–ê–¢–£–°–ê–ú:",
                    f"   ‚Ä¢ –û—Ç–∫—Ä—ã—Ç–æ: {status_stats.get('open', 0)}",
                    f"   ‚Ä¢ –í —Ä–∞–±–æ—Ç–µ: {status_stats.get('in_progress', 0)}",
                    f"   ‚Ä¢ –ó–∞–∫—Ä—ã—Ç–æ: {status_stats.get('closed', 0)}",
                    f"   ‚Ä¢ –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–æ: {status_stats.get('archived', 0)}",
                    f"",
                    f"‚ö° –ü–û –ü–†–ò–û–†–ò–¢–ï–¢–ê–ú:",
                    f"   ‚Ä¢ –í—ã—Å–æ–∫–∏–π: {priority_stats.get('high', 0)}",
                    f"   ‚Ä¢ –°—Ä–µ–¥–Ω–∏–π: {priority_stats.get('medium', 0)}",
                    f"   ‚Ä¢ –ù–∏–∑–∫–∏–π: {priority_stats.get('low', 0)}",
                    f"",
                    f"üîß –°–ü–ï–¶–ò–ê–õ–¨–ù–´–ï:",
                    f"   ‚Ä¢ –° IT-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º: {active_it_tickets}",
                    f"   ‚Ä¢ –û–∂–∏–¥–∞—é—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞: {operator_requests}",
                ]
            )

            # –¢–æ–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø—Ä–æ–±–ª–µ–º
            if top_categories:
                report_lines.append(f"")
                report_lines.append(f"üè∑Ô∏è –¢–û–ü –ö–ê–¢–ï–ì–û–†–ò–ô –ü–†–û–ë–õ–ï–ú:")
                for category, count in top_categories:
                    report_lines.append(f"   ‚Ä¢ {category}: {count} –∑–∞—è–≤–æ–∫")
            else:
                report_lines.append(f"")
                if total_tickets > 0:
                    report_lines.append(
                        f"üè∑Ô∏è –¢–û–ü –ö–ê–¢–ï–ì–û–†–ò–ô –ü–†–û–ë–õ–ï–ú: –∑–∞—è–≤–∫–∏ –Ω–µ –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω—ã"
                    )
                else:
                    report_lines.append(f"üè∑Ô∏è –¢–û–ü –ö–ê–¢–ï–ì–û–†–ò–ô –ü–†–û–ë–õ–ï–ú: –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç")

            # –î–æ–±–∞–≤–ª—è–µ–º —Å–∞–º—ã–µ —Å—Ç–∞—Ä—ã–µ –∑–∞—è–≤–∫–∏
            if oldest_tickets:
                report_lines.append(f"")
                report_lines.append(f"‚è≥ –°–ê–ú–´–ï –°–¢–ê–†–´–ï –ê–ö–¢–ò–í–ù–´–ï –ó–ê–Ø–í–ö–ò:")
                for ticket in oldest_tickets:
                    age = datetime.datetime.utcnow() - ticket.created_at
                    hours = int(age.total_seconds() / 3600)
                    priority_emoji = (
                        "üî¥"
                        if ticket.priority == "high"
                        else "üü°" if ticket.priority == "medium" else "üü¢"
                    )
                    classification = ticket.classification or "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
                    report_lines.append(
                        f"   {priority_emoji} #{ticket.id} - {classification[:30]} (–≤–∏—Å–∏—Ç {hours}—á)"
                    )
            else:
                report_lines.append(f"")
                report_lines.append(
                    f"‚è≥ –°–ê–ú–´–ï –°–¢–ê–†–´–ï –ê–ö–¢–ò–í–ù–´–ï –ó–ê–Ø–í–ö–ò: –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫"
                )

            # –ê–Ω–∞–ª–∏–∑ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —Å–ª—É—á–∞–π–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤
            if sample_dialogs:
                report_lines.append(f"")
                report_lines.append(f"üí¨ –ê–ù–ê–õ–ò–ó –°–õ–£–ß–ê–ô–ù–´–• –î–ò–ê–õ–û–ì–û–í:")

                # –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
                for dialog in sample_dialogs:
                    # –°–æ–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞
                    user_messages = [
                        m.text for m in dialog["messages"] if m.sender == "user"
                    ]

                    # –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
                    positive_words = [
                        "—Å–ø–∞—Å–∏–±–æ",
                        "–ø–æ–º–æ–≥–ª–æ",
                        "—Ä–∞–±–æ—Ç–∞–µ—Ç",
                        "–∑–∞—Ä–∞–±–æ—Ç–∞–ª–æ",
                        "–æ—Ç–ª–∏—á–Ω–æ",
                        "—Ö–æ—Ä–æ—à–æ",
                        "—Ä–µ—à–∏–ª–∏",
                    ]
                    negative_words = [
                        "–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç",
                        "–ø–ª–æ—Ö–æ",
                        "–æ—à–∏–±–∫–∞",
                        "–ø—Ä–æ–±–ª–µ–º–∞",
                        "–Ω–µ –ø–æ–º–æ–≥–ª–æ",
                        "–≤—Å—ë –µ—â—ë",
                    ]

                    all_text = " ".join(user_messages).lower()
                    positive_count = sum(
                        1 for word in positive_words if word in all_text
                    )
                    negative_count = sum(
                        1 for word in negative_words if word in all_text
                    )

                    if positive_count > negative_count:
                        sentiment = "üòä –ü–æ–∑–∏—Ç–∏–≤–Ω–∞—è"
                    elif negative_count > positive_count:
                        sentiment = "üòü –ù–µ–≥–∞—Ç–∏–≤–Ω–∞—è"
                    else:
                        sentiment = "üòê –ù–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è"

                    msg_count = len(dialog["messages"])
                    report_lines.append(
                        f"   ‚Ä¢ #{dialog['ticket_id']} ({dialog['classification'][:20]}): {sentiment}, {msg_count} —Å–æ–æ–±—â."
                    )
            else:
                report_lines.append(f"")
                if status_stats.get("closed", 0) > 0:
                    report_lines.append(
                        f"üí¨ –ê–ù–ê–õ–ò–ó –°–õ–£–ß–ê–ô–ù–´–• –î–ò–ê–õ–û–ì–û–í: –∑–∞–∫—Ä—ã—Ç—ã–µ –∑–∞—è–≤–∫–∏ –±–µ–∑ —Å–æ–æ–±—â–µ–Ω–∏–π"
                    )
                else:
                    report_lines.append(
                        f"üí¨ –ê–ù–ê–õ–ò–ó –°–õ–£–ß–ê–ô–ù–´–• –î–ò–ê–õ–û–ì–û–í: –Ω–µ—Ç –∑–∞–∫—Ä—ã—Ç—ã—Ö –∑–∞—è–≤–æ–∫"
                    )

            report = "\n".join(report_lines)

            print(f"[REPORT] –û—Ç—á—ë—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω: {len(report)} —Å–∏–º–≤–æ–ª–æ–≤")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ
            _send_action_to_telegram("üìä –û—Ç—á—ë—Ç –æ —Å–ª—É–∂–±–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –≥–æ—Ç–æ–≤")

            return report

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á—ë—Ç–∞: {e}")
        print(f"[REPORT ERROR] {e}")
        _send_action_to_telegram("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á—ë—Ç–∞")
        return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á—ë—Ç–∞: {str(e)}"


@tool
async def save_case_to_knowledge_base(
    problem_description: str = None, solution: str = None
) -> str:
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —É—Å–ø–µ—à–Ω—ã–π –∫–µ–π—Å –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π –¥–ª—è –±—É–¥—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.

    –ö–û–ì–î–ê –ò–°–ü–û–õ–¨–ó–û–í–ê–¢–¨:
    - –ö–æ–≥–¥–∞ —Ç—ã —É—Å–ø–µ—à–Ω–æ —Ä–µ—à–∏–ª –ø—Ä–æ–±–ª–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª —á—Ç–æ –ø—Ä–æ–±–ª–µ–º–∞ —Ä–µ—à–µ–Ω–∞ (—Å–∫–∞–∑–∞–ª "—Å–ø–∞—Å–∏–±–æ", "–∑–∞—Ä–∞–±–æ—Ç–∞–ª–æ", "–ø–æ–º–æ–≥–ª–æ")
    - –†–µ—à–µ–Ω–∏–µ –æ–∫–∞–∑–∞–ª–æ—Å—å –ø–æ–ª–µ–∑–Ω—ã–º –∏ –º–æ–∂–µ—Ç –ø–æ–º–æ—á—å –¥—Ä—É–≥–∏–º
    - –ü—Ä–æ–±–ª–µ–º–∞ –∏ —Ä–µ—à–µ–Ω–∏–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∏ –ø–æ–Ω—è—Ç–Ω—ã–µ
    - –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π –¥–ª—è –æ–±—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–ª–∏ –Ω–µ–ø–æ–ª–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π

    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã (–û–ü–¶–ò–û–ù–ê–õ–¨–ù–´–ï):
    - problem_description: –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ - —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑ –¥–∏–∞–ª–æ–≥–∞)
    - solution: –ü–æ—à–∞–≥–æ–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ - —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑ –¥–∏–∞–ª–æ–≥–∞)

    –í–ê–ñ–ù–û: –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ø—Ä–æ—Å–∏–ª "–¥–æ–±–∞–≤—å –≤ –±–∞–∑—É" –∏–ª–∏ "—Å–æ—Ö—Ä–∞–Ω–∏ –∫–µ–π—Å" -
    –≤—ã–∑—ã–≤–∞–π –ë–ï–ó –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤! –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —Å–∞–º –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥–∏–∞–ª–æ–≥ –∏ —Å–æ–∑–¥–∞—Å—Ç —Å–∞–º–º–∞—Ä–∏.

    –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
    1. –° –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: save_case_to_knowledge_base("–ü—Ä–∏–Ω—Ç–µ—Ä –Ω–µ –ø–µ—á–∞—Ç–∞–µ—Ç", "1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±—É–º–∞–≥—É...")
    2. –ë–ï–ó –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏): save_case_to_knowledge_base()

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–µ–π—Å–∞.
    """
    import datetime

    print(f"[AGENT ACTION] –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–µ–π—Å–∞ –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –≤ Telegram (–Ω–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞)
    _send_action_to_telegram("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–µ–π—Å–∞ –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π...")

    # –ï—Å–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–µ —É–∫–∞–∑–∞–Ω—ã - –±—É–¥–µ–º –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑ –¥–∏–∞–ª–æ–≥–∞
    if problem_description is None or solution is None:
        print(
            f"[SAVE CASE] –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–µ —É–∫–∞–∑–∞–Ω—ã - –±—É–¥—É –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–∞–º–º–∞—Ä–∏ –∏–∑ –¥–∏–∞–ª–æ–≥–∞"
        )
    else:
        print(f"[SAVE CASE] –ü—Ä–æ–±–ª–µ–º–∞: {problem_description[:100]}...")
        print(f"[SAVE CASE] –†–µ—à–µ–Ω–∏–µ: {solution[:100]}...")

    try:
        from app.db.database import KnowledgeSessionLocal
        from app.db import tickets_crud as crud
        from app.bots.telegram_bot import _session_maker

        # –ü–æ–ª—É—á–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∏ —Ä–µ—à–µ–Ω–∏–µ
        final_problem = problem_description
        final_solution = solution

        # –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã - –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑ –¥–∏–∞–ª–æ–≥–∞
        if final_problem is None or final_solution is None:
            conversation_id = get_current_conversation_id()

            if not conversation_id:
                print("[SAVE CASE ERROR] conversation_id –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return "‚ö†Ô∏è –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–µ–∫—É—â–∏–π –¥–∏–∞–ª–æ–≥"

            if not _session_maker:
                print("[SAVE CASE ERROR] session_maker –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                return "‚ö†Ô∏è –û—à–∏–±–∫–∞: –ë–î –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞"

            # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞ –∏–∑ –ë–î —á–µ—Ä–µ–∑ crud —Ñ—É–Ω–∫—Ü–∏—é
            async with _session_maker() as session:
                ticket_data = await crud.get_ticket_with_messages(
                    session, conversation_id
                )

                if not ticket_data:
                    print(f"[SAVE CASE ERROR] Ticket {conversation_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    return "‚ö†Ô∏è –û—à–∏–±–∫–∞: –¥–∏–∞–ª–æ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω"

                ticket, messages = ticket_data

                # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞
                dialogue_parts = []
                for msg in messages:
                    role = (
                        "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
                        if msg.sender == "user"
                        else "–ë–æ—Ç" if msg.sender == "bot" else "–û–ø–µ—Ä–∞—Ç–æ—Ä"
                    )
                    dialogue_parts.append(f"{role}: {msg.text}")

                dialogue_history = "\n".join(dialogue_parts)
                print(
                    f"[SAVE CASE] –ü–æ–ª—É—á–µ–Ω–∞ –∏—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞: {len(dialogue_history)} —Å–∏–º–≤–æ–ª–æ–≤"
                )

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∞–º–º–∞—Ä–∏ —á–µ—Ä–µ–∑ LLM
            from app.rag.service import get_llm_client
            import yaml

            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            with open("configs/rag_config.yaml", "r", encoding="utf-8") as f:
                config = yaml.safe_load(f)

            # –ü—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∞–º–º–∞—Ä–∏
            summary_prompt = f"""–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –¥–∏–∞–ª–æ–≥ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏ —Å–æ–∑–¥–∞–π –∫—Ä–∞—Ç–∫–æ–µ —Å–∞–º–º–∞—Ä–∏ –¥–ª—è –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π.

–î–ò–ê–õ–û–ì:
{dialogue_history}

–°–æ–∑–¥–∞–π:
1. –ü–†–û–ë–õ–ï–ú–ê: –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –≤ 1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö (—á—Ç–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–ª–æ, –∫–∞–∫–∏–µ —Å–∏–º–ø—Ç–æ–º—ã)
2. –†–ï–®–ï–ù–ò–ï: –ü–æ—à–∞–≥–æ–≤–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –∫–∞–∫ —Ä–µ—à–∏—Ç—å —ç—Ç—É –ø—Ä–æ–±–ª–µ–º—É (–∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è)

–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:
–ü–†–û–ë–õ–ï–ú–ê: [–æ–ø–∏—Å–∞–Ω–∏–µ]
–†–ï–®–ï–ù–ò–ï:
[–ø–æ—à–∞–≥–æ–≤–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è]

–ë—É–¥—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –∏ –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–º. –û–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –ø–æ–º–æ—á—å –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å –ø–æ—Ö–æ–∂–µ–π –ø—Ä–æ–±–ª–µ–º–æ–π."""

            llm_client = get_llm_client()

            print("[SAVE CASE] –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Å–∞–º–º–∞—Ä–∏ —á–µ—Ä–µ–∑ LLM...")
            response = llm_client.chat.completions.create(
                model="gpt-3.5-turbo",
                messages=[{"role": "user", "content": summary_prompt}],
                max_tokens=500,
                temperature=0.3,
            )

            summary_text = response.choices[0].message.content.strip()
            print(f"[SAVE CASE] LLM —Å–∞–º–º–∞—Ä–∏ –ø–æ–ª—É—á–µ–Ω–æ: {len(summary_text)} —Å–∏–º–≤–æ–ª–æ–≤")

            # –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç LLM
            if "–ü–†–û–ë–õ–ï–ú–ê:" in summary_text and "–†–ï–®–ï–ù–ò–ï:" in summary_text:
                parts = summary_text.split("–†–ï–®–ï–ù–ò–ï:")
                final_problem = parts[0].replace("–ü–†–û–ë–õ–ï–ú–ê:", "").strip()
                final_solution = parts[1].strip()
                print(f"[SAVE CASE] –†–∞—Å–ø–∞—Ä—Å–µ–Ω–æ - –ü—Ä–æ–±–ª–µ–º–∞: {final_problem[:50]}...")
                print(f"[SAVE CASE] –†–∞—Å–ø–∞—Ä—Å–µ–Ω–æ - –†–µ—à–µ–Ω–∏–µ: {final_solution[:50]}...")
            else:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç –∫–∞–∫ –µ—Å—Ç—å
                final_problem = "–ö–µ–π—Å –∏–∑ –¥–∏–∞–ª–æ–≥–∞"
                final_solution = summary_text

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–µ–π—Å –¥–ª—è –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
        timestamp = datetime.datetime.now().strftime("%Y-%m-%d")
        case_content = f"""–ü–†–û–ë–õ–ï–ú–ê: {final_problem}

–†–ï–®–ï–ù–ò–ï:
{final_solution}

(–ö–µ–π—Å –¥–æ–±–∞–≤–ª–µ–Ω –±–æ—Ç–æ–º {timestamp})"""

        # –°–æ–∑–¥–∞—ë–º embedding –¥–ª—è –∫–µ–π—Å–∞
        model = get_sentence_transformer()
        embedding_vector = model.encode(case_content)
        embedding_bytes = embedding_vector.tobytes()

        async with KnowledgeSessionLocal() as session:
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–µ–π—Å –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π
            chunk = await crud.add_document_chunk(
                session=session,
                content=case_content,
                source_file=f"bot_case_{timestamp}.txt",
                chunk_index=0,
                start_char=0,
                end_char=len(case_content),
                embedding=embedding_bytes,
                chunk_metadata=f'{{"source": "bot", "type": "solved_case", "date": "{timestamp}"}}',
            )

            logger.info(f"Case saved to knowledge base: chunk_id={chunk.id}")
            print(f"[SAVE CASE] ‚úÖ –ö–µ–π—Å —Å–æ—Ö—Ä–∞–Ω—ë–Ω —Å ID: {chunk.id}")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –≤ Telegram
            _send_action_to_telegram(f"üíæ –ö–µ–π—Å —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π (#{chunk.id})")

            return (
                f"‚úÖ –ö–µ–π—Å —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π!\n"
                f"ID –∑–∞–ø–∏—Å–∏: {chunk.id}\n\n"
                f"–¢–µ–ø–µ—Ä—å —ç—Ç–æ—Ç –∫–µ–π—Å –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ä–µ—à–µ–Ω–∏–π –ø–æ—Ö–æ–∂–∏—Ö –ø—Ä–æ–±–ª–µ–º."
            )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–µ–π—Å–∞: {e}")
        print(f"[SAVE CASE ERROR] {e}")
        _send_action_to_telegram(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–µ–π—Å–∞")
        return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–µ–π—Å–∞: {str(e)}"


def should_update_classification_and_priority(
    current_classification: str,
    current_priority: str,
    recent_messages: str,
    message_count: int,
) -> bool:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é –∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –¥–∏–∞–ª–æ–≥–∞."""
    try:
        from app.rag.service import get_llm_client
        import yaml

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        with open("configs/rag_config.yaml", "r", encoding="utf-8") as f:
            config = yaml.safe_load(f)

        auto_update_config = config.get("agent", {}).get("auto_update", {})

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π
        min_messages = auto_update_config.get("min_messages_before_update", 2)
        if message_count < min_messages:
            print(
                f"[AUTO_UPDATE] –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π ({message_count} < {min_messages})"
            )
            return False

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        update_every = auto_update_config.get("update_every_n_messages", 3)
        if message_count % update_every != 0:
            print(
                f"[AUTO_UPDATE] –ù–µ –≤—Ä–µ–º—è –æ–±–Ω–æ–≤–ª—è—Ç—å (—Å–æ–æ–±—â–µ–Ω–∏–µ {message_count}, –æ–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ {update_every})"
            )
            return False

        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        should_update_prompt_template = auto_update_config.get(
            "should_update_prompt", ""
        )

        if not should_update_prompt_template:
            print("[AUTO_UPDATE WARNING] –ü—Ä–æ–º–ø—Ç should_update –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥–µ")
            return False

        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç
        should_update_prompt = should_update_prompt_template.format(
            current_classification=current_classification or "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞",
            current_priority=current_priority or "medium",
            recent_messages=recent_messages,
        )

        # –ü–æ–ª—É—á–∞–µ–º LLM –∫–ª–∏–µ–Ω—Ç
        llm_client = get_llm_client()

        # –°–ø—Ä–∞—à–∏–≤–∞–µ–º LLM –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        response = llm_client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": should_update_prompt}],
            max_tokens=5,
            temperature=0.1,
        )

        llm_result = response.choices[0].message.content.strip().lower()

        should_update = "yes" in llm_result

        print(f"[AUTO_UPDATE] LLM —Ä–µ—à–µ–Ω–∏–µ: {llm_result} -> {should_update}")
        logger.info(f"Should update classification/priority: {should_update}")

        return should_update

    except Exception as e:
        print(f"[AUTO_UPDATE ERROR] –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
        logger.error(f"Should update check error: {e}")
        return False


def auto_update_classification(
    conversation_id: int,
    dialogue_history: str,
    message_count: int,
    current_classification: str = None,
) -> dict:
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¢–û–õ–¨–ö–û –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ (–±–µ–∑ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞).

    –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –¢–û–õ–¨–ö–û —á–µ—Ä–µ–∑ MCP tool set_priority –∞–≥–µ–Ω—Ç–æ–º.

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç dict —Å –∫–ª—é—á–∞–º–∏:
    - updated: bool - –±—ã–ª–∞ –ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è
    - classification: str - –Ω–æ–≤–∞—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è (–µ—Å–ª–∏ –±—ã–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞)
    """
    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        dialogue_lines = dialogue_history.split("\n")
        recent_lines = (
            dialogue_lines[-5:] if len(dialogue_lines) > 5 else dialogue_lines
        )
        recent_messages = "\n".join(recent_lines)

        if len(recent_messages) < 1000 and len(dialogue_history) > 1000:
            recent_messages = dialogue_history[-1000:]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ (–∏—Å–ø–æ–ª—å–∑—É–µ–º medium –∫–∞–∫ —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
        if not should_update_classification_and_priority(
            current_classification or "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞",
            "medium",  # –§–∏–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç, —Ç.–∫. –º—ã –µ–≥–æ –Ω–µ –æ–±–Ω–æ–≤–ª—è–µ–º
            recent_messages,
            message_count,
        ):
            return {"updated": False}

        print(
            f"[AUTO_UPDATE] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è conversation {conversation_id}"
        )

        # –û–±–Ω–æ–≤–ª—è–µ–º –¢–û–õ–¨–ö–û –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ –í–°–ï–ô –∏—Å—Ç–æ—Ä–∏–∏
        new_classification_result = _classify_request_internal(
            dialogue_history=dialogue_history
        )
        new_classification = new_classification_result.replace(
            "–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –ø—Ä–æ–±–ª–µ–º—ã:", ""
        ).strip()

        print(f"[AUTO_UPDATE] –ù–æ–≤–∞—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è: {new_classification}")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
        import asyncio
        from app.db.database import TicketsSessionLocal
        from app.db import tickets_crud as crud

        async def update_ticket():
            async with TicketsSessionLocal() as session:
                ticket = await crud.get_ticket_by_id(session, conversation_id)
                if ticket:
                    ticket.classification = new_classification
                    await session.commit()
                    print(
                        f"[AUTO_UPDATE] –û–±–Ω–æ–≤–ª–µ–Ω–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è ticket {conversation_id}: "
                        f"classification={new_classification}"
                    )
                else:
                    print(f"[AUTO_UPDATE WARNING] Ticket {conversation_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")

        try:
            loop = asyncio.get_event_loop()
            if loop.is_running():
                asyncio.create_task(update_ticket())
            else:
                loop.run_until_complete(update_ticket())
        except Exception as e:
            print(f"[AUTO_UPDATE ERROR] –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î: {e}")
            logger.error(f"Failed to save classification update: {e}")

        return {
            "updated": True,
            "classification": new_classification,
        }

    except Exception as e:
        print(f"[AUTO_UPDATE ERROR] –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}")
        logger.error(f"Auto update classification error: {e}")
        return {"updated": False}


def auto_update_classification_and_priority(
    conversation_id: int,
    dialogue_history: str,
    message_count: int,
    current_classification: str = None,
    current_priority: str = None,
) -> dict:
    """–£–°–¢–ê–†–ï–í–®–ê–Ø –§–£–ù–ö–¶–ò–Ø - –æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏.

    –¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–π:
    - auto_update_classification() - –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
    - set_priority() MCP tool - –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –∞–≥–µ–Ω—Ç–æ–º

    –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ–ø–µ—Ä—å –æ–±–Ω–æ–≤–ª—è–µ—Ç –¢–û–õ–¨–ö–û –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é.
    """
    return auto_update_classification(
        conversation_id=conversation_id,
        dialogue_history=dialogue_history,
        message_count=message_count,
        current_classification=current_classification,
    )


# suggest_similar_problems —É–¥–∞–ª–µ–Ω–∞ - —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –≤ search_knowledge_base —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º suggest_similar=True
