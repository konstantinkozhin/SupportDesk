"""
–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏ —Å –ø–æ–º–æ—â—å—é –ª–æ–∫–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏ Whisper
"""

import logging
import os
import shutil
from typing import Optional

logger = logging.getLogger(__name__)


class WhisperService:
    """
    –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏ Whisper
    –ù–µ —Ç—Ä–µ–±—É–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏
    """

    def __init__(self, model_name: str = "medium", ffmpeg_path: Optional[str] = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ Whisper

        Args:
            model_name: –†–∞–∑–º–µ—Ä –º–æ–¥–µ–ª–∏ Whisper (tiny, base, small, medium, large)
                       medium - —Ö–æ—Ä–æ—à–∏–π –±–∞–ª–∞–Ω—Å –º–µ–∂–¥—É –∫–∞—á–µ—Å—Ç–≤–æ–º –∏ —Å–∫–æ—Ä–æ—Å—Ç—å—é
            ffmpeg_path: –Ø–≤–Ω—ã–π –ø—É—Ç—å –∫ FFmpeg (–µ—Å–ª–∏ None, –±—É–¥–µ—Ç –∞–≤—Ç–æ–ø–æ–∏—Å–∫)
        """
        self.model_name = model_name
        self.model = None
        self.ffmpeg_path = ffmpeg_path
        self._setup_ffmpeg()
        self._load_model()

    def _setup_ffmpeg(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—É—Ç–∏ –∫ FFmpeg"""
        try:
            logger.info(f"üîç –ù–∞—Å—Ç—Ä–æ–π–∫–∞ FFmpeg. –£–∫–∞–∑–∞–Ω–Ω—ã–π –ø—É—Ç—å: {self.ffmpeg_path}")
            ffmpeg_found = False

            # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω —è–≤–Ω—ã–π –ø—É—Ç—å
            if self.ffmpeg_path:
                logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä—è—é –ø—É—Ç—å: {self.ffmpeg_path}")
                if os.path.exists(self.ffmpeg_path):
                    dir_path = os.path.dirname(self.ffmpeg_path)
                    os.environ["PATH"] = (
                        dir_path + os.pathsep + os.environ.get("PATH", "")
                    )
                    logger.info(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è FFmpeg –∏–∑: {self.ffmpeg_path}")
                    logger.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –≤ PATH: {dir_path}")
                    ffmpeg_found = True
                else:
                    logger.warning(f"‚ö†Ô∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏: {self.ffmpeg_path}")

            # –ê–≤—Ç–æ–ø–æ–∏—Å–∫ FFmpeg –≤ —Å–∏—Å—Ç–µ–º–µ
            if not ffmpeg_found:
                ffmpeg_cmd = shutil.which("ffmpeg")
                if ffmpeg_cmd:
                    logger.info(f"‚úÖ FFmpeg –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ: {ffmpeg_cmd}")
                    ffmpeg_found = True

            # –ü–æ–ø—ã—Ç–∫–∞ –Ω–∞–π—Ç–∏ —á–µ—Ä–µ–∑ imageio_ffmpeg (—Ä–µ–∑–µ—Ä–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç)
            if not ffmpeg_found:
                try:
                    import imageio_ffmpeg

                    ffmpeg_exe = imageio_ffmpeg.get_ffmpeg_exe()
                    dir_path = os.path.dirname(ffmpeg_exe)
                    os.environ["PATH"] = (
                        dir_path + os.pathsep + os.environ.get("PATH", "")
                    )
                    logger.info(
                        f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è FFmpeg –∏–∑ imageio_ffmpeg: {ffmpeg_exe}"
                    )
                    ffmpeg_found = True
                except ImportError:
                    logger.debug("imageio_ffmpeg –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                except Exception as e:
                    logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å FFmpeg –∏–∑ imageio: {e}")

            if not ffmpeg_found:
                logger.error(
                    "‚ùå FFmpeg –Ω–µ –Ω–∞–π–¥–µ–Ω! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ FFmpeg:\n"
                    "Windows: choco install ffmpeg (–∏–ª–∏ —Å–∫–∞—á–∞–π—Ç–µ —Å https://ffmpeg.org)\n"
                    "Linux: sudo apt install ffmpeg\n"
                    "MacOS: brew install ffmpeg\n"
                    "–ü–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ü–ï–†–ï–ó–ê–ü–£–°–¢–ò–¢–ï –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ!\n"
                    "–ò–ª–∏ —É–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –≤ configs/app_config.yaml: speech.ffmpeg_path"
                )
                raise RuntimeError("FFmpeg –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ FFmpeg: {e}")
            raise

    def _load_model(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ Whisper"""
        try:
            import whisper

            logger.info(f"–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ Whisper '{self.model_name}'...")
            self.model = whisper.load_model(self.model_name)
            logger.info(f"–ú–æ–¥–µ–ª—å Whisper '{self.model_name}' —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        except ImportError:
            logger.error(
                "–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ openai-whisper –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. "
                "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install openai-whisper"
            )
            raise
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏ Whisper: {e}")
            raise

    async def transcribe_audio(self, audio_file_path: str, language: str = "ru") -> str:
        """
        –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏ –∏–∑ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞

        Args:
            audio_file_path: –ü—É—Ç—å –∫ –∞—É–¥–∏–æ—Ñ–∞–π–ª—É (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è: mp3, ogg, wav, m4a –∏ –¥—Ä.)
            language: –ö–æ–¥ —è–∑—ã–∫–∞ (ru, en –∏ —Ç.–¥.)

        Returns:
            –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        """
        if not self.model:
            return "–û—à–∏–±–∫–∞: –º–æ–¥–µ–ª—å Whisper –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞"

        if not os.path.exists(audio_file_path):
            return "–û—à–∏–±–∫–∞: —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω"

        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º FFmpeg –µ—â–µ —Ä–∞–∑ –ø–µ—Ä–µ–¥ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ–º
            if not shutil.which("ffmpeg"):
                error_msg = (
                    "‚ùå FFmpeg –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ PATH!\n\n"
                    "–†–ï–®–ï–ù–ò–ï:\n"
                    "1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ FFmpeg:\n"
                    "   Windows: choco install ffmpeg\n"
                    "   –ò–ª–∏ —Å–∫–∞—á–∞–π—Ç–µ: https://ffmpeg.org/download.html\n\n"
                    "2. –ü–ï–†–ï–ó–ê–ü–£–°–¢–ò–¢–ï –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏!\n\n"
                    "3. –ò–ª–∏ —É–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –≤ configs/app_config.yaml:\n"
                    "   speech:\n"
                    "     ffmpeg_path: 'C:\\\\ffmpeg\\\\bin\\\\ffmpeg.exe'"
                )
                logger.error(error_msg)
                return "FFmpeg –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ FFmpeg –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ."

            logger.info(f"–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –∞—É–¥–∏–æ: {audio_file_path}")

            # Whisper –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –∞—É–¥–∏–æ –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å –ø–æ–º–æ—â—å—é ffmpeg
            result = self.model.transcribe(
                audio_file_path,
                language=language,
                fp16=False,  # –û—Ç–∫–ª—é—á–∞–µ–º FP16 –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å CPU
                verbose=False,
            )

            text = result["text"].strip()
            logger.info(f"–†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: {text[:100]}...")

            if not text:
                return "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å –≤ –∞—É–¥–∏–æ—Ñ–∞–π–ª–µ"

            return text

        except FileNotFoundError as e:
            error_msg = (
                "‚ùå FFmpeg –Ω–µ –Ω–∞–π–¥–µ–Ω!\n\n"
                "–£–°–¢–ê–ù–û–í–ò–¢–ï FFmpeg:\n"
                "1. Windows: choco install ffmpeg\n"
                "2. –ü–ï–†–ï–ó–ê–ü–£–°–¢–ò–¢–ï –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ\n"
                "3. –ò–ª–∏ —É–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –≤ configs/app_config.yaml"
            )
            logger.error(error_msg)
            logger.error(f"–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {e}", exc_info=True)
            return "FFmpeg –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ FFmpeg –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ."
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏: {e}", exc_info=True)
            return f"–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è: {str(e)}"

    def get_available_models(self) -> list[str]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π Whisper"""
        return ["tiny", "base", "small", "medium", "large"]

    def get_model_info(self) -> dict:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–π –º–æ–¥–µ–ª–∏"""
        return {
            "model_name": self.model_name,
            "loaded": self.model is not None,
            "requires_internet": False,
            "supported_languages": [
                "ru",
                "en",
                "uk",
                "be",
                "kk",
                "uz",
                "ky",
            ],
        }
