"""
RAG Agent - –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ —Å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏
"""

import logging
import os
from typing import Dict, Any, List

logger = logging.getLogger(__name__)


class RAGAgent:
    """–ü—Ä–æ—Å—Ç–æ–π RAG –∞–≥–µ–Ω—Ç —Å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏"""

    def __init__(self, config: Dict[str, Any]):
        self.config = config
        self.categories = config.get("agent", {}).get("categories", [])

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ agno –¥–æ—Å—Ç—É–ø–Ω–æ
        self.agent = None
        try:
            self._init_agent()
        except ImportError:
            logger.warning("agno not available, using fallback mode")

    def _init_agent(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è agno –∞–≥–µ–Ω—Ç–∞"""
        from agno.agent import Agent
        from agno.models.llama_cpp import LlamaCpp
        from app.rag.agent_tools import (
            search_knowledge_base,
            classify_request,
            set_priority,
            create_it_ticket,
            call_operator,
            get_system_status,
            save_case_to_knowledge_base,
            get_support_report,
        )

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–¥–µ–ª–∏
        llm = LlamaCpp(
            id="gemma-3-27b-it",
            base_url="https://demo.ai.sfu-kras.ru/v1",
        )

        # –ü–æ–ª—É—á–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
        system_instructions = self.config.get("agent", {}).get(
            "system_instructions",
            "–¢—ã - –ø–æ–º–æ—â–Ω–∏–∫ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏. –û—Ç–≤–µ—á–∞–π –ø–æ–ª–µ–∑–Ω–æ –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω–æ.",
        )

        self.agent = Agent(
            name="RAG Support Agent",
            description="–ê–≥–µ–Ω—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π",
            model=llm,
            tools=[
                search_knowledge_base,
                classify_request,
                set_priority,
                create_it_ticket,
                call_operator,
                get_system_status,
                save_case_to_knowledge_base,
                get_support_report,
            ],
            instructions=system_instructions,
            debug_mode=False,
            store_history_messages=False,
            store_tool_messages=False,
            store_media=False,
        )

    async def process_query(
        self,
        query: str,
        chat_history: List[Dict[str, Any]] = None,
        conversation_id: int = None,
    ) -> str:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —á–µ—Ä–µ–∑ LLM –∞–≥–µ–Ω—Ç–∞ —Å —É—á–µ—Ç–æ–º –∏—Å—Ç–æ—Ä–∏–∏

        Args:
            query: –¢–µ–∫—É—â–∏–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            chat_history: –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ (—Å–ø–∏—Å–æ–∫ ChatMessage –æ–±—ä–µ–∫—Ç–æ–≤ —Å –ø–æ–ª—è–º–∏ message, is_user, timestamp)
            conversation_id: ID —Ç–µ–∫—É—â–µ–≥–æ –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –∞–≥–µ–Ω—Ç–∞
        """
        print(f"\n[AGENT START] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å: '{query}'")

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º conversation_id –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø–µ—Ä–µ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º
        if conversation_id is not None:
            from app.rag.agent_tools import set_current_conversation_id

            set_current_conversation_id(conversation_id)
            print(f"[AGENT] –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω conversation_id: {conversation_id}")
        else:
            print(f"[AGENT WARNING] conversation_id –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω –≤ process_query!")

        if chat_history:
            print(f"[AGENT] –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞: {len(chat_history)} —Å–æ–æ–±—â–µ–Ω–∏–π")

        if not self.agent:
            print("‚ö†Ô∏è [AGENT] –ê–≥–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É—é fallback")
            return self._fallback_process(query)

        try:
            print("[AGENT] –û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å –≤ LLM...")

            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å –∏—Å—Ç–æ—Ä–∏–µ–π –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
            if chat_history and len(chat_history) > 0:
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
                context_parts = []
                for msg in chat_history:
                    role = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å" if msg.is_user else "–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç"
                    context_parts.append(f"{role}: {msg.message}")

                # –û–±—ä–µ–¥–∏–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏ –¥–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –∑–∞–ø—Ä–æ—Å
                full_context = "\n".join(context_parts) + f"\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {query}"

                print(
                    f"[AGENT] –ü–µ—Ä–µ–¥–∞—é –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å {len(chat_history)} –ø—Ä–µ–¥—ã–¥—É—â–∏–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏"
                )

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–µ—Å—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –∞–≥–µ–Ω—Ç—É
                result = await self.agent.arun(full_context)
            else:
                # –ù–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ - –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
                result = await self.agent.arun(query)

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –∞–≥–µ–Ω—Ç–∞
            print("[AGENT] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è...")
            from app.rag.agent_tools import process_pending_actions

            await process_pending_actions()

            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
            if hasattr(result, "content"):
                response = result.content.strip()
            else:
                response = str(result).strip()

            print(f"‚úÖ [AGENT COMPLETE] –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω, –¥–ª–∏–Ω–∞: {len(response)} —Å–∏–º–≤–æ–ª–æ–≤")
            return response

        except Exception as e:
            print(f"üí• [AGENT ERROR] –û—à–∏–±–∫–∞ –∞–≥–µ–Ω—Ç–∞: {e}")
            logger.error(f"Agent error: {e}")
            return self._fallback_process(query)

    def _fallback_process(self, query: str) -> str:
        """–ü—Ä–æ—Å—Ç–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –±–µ–∑ –∞–≥–µ–Ω—Ç–∞ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç"""
        print(f"üîÑ [FALLBACK] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å –±–µ–∑ –∞–≥–µ–Ω—Ç–∞: '{query}'")
        logger.info(f"Fallback processing query: {query}")
        return "–°–µ–π—á–∞—Å —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É."
